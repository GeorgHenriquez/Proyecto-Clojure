
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER PLUS MINUS TIMES DIVIDE LPAREN RPAREN LCURLYBRA RCURLYBRA SETDEF ID FLOAT EQUAL NOTEQUAL STRING GREATERTHAN LESSTHAN GREATERTHANEQUALS LESSTHANEQUALS APOSTROPHE LBRACKET RBRACKET QUESTION DOUBLE_POINT POINT PERCENTAJE AT EXCLAMATION DEF DEFN NULL BOOLEAN_TRUE BOOLEAN_FALSE AND OR NOT IF ELSE FUNCTION_PRINTLN SET UNION DIFFERENCE INTERSECTION WHILE DO FOR READLINE FUNCTION_EMPTY TYPE_STR FUNCTION_SUB FUNCTION_SEQ FUNCTION_GET FUNCTION_COUNT FUNCTION_CONJ VECTOR LIST FUNCTION_NTH TAKE DROPstament : LPAREN compute RPARENcompute : function\n                | general_expressionfunction : FUNCTION_PRINTLN multipleObjectsfunction : READLINEfunction : FUNCTION_EMPTY STRINGmultiplestring : STRING\n                        | STRING multiplestring\n                        | stament\n                        | stament multiplestringfunction : TYPE_STR multiplestringfunction : FUNCTION_SUB STRING NUMBER\n                 | FUNCTION_SUB ID NUMBERfunction : FUNCTION_SEQ STRING\n                 | FUNCTION_SEQ IDmultipleObjects : value\n                        | value multipleObjects\n                        | sequential_colls\n                        | sequential_colls multipleObjectsvalue : STRING\n              | NUMBER\n              | FLOAT\n              | BOOLEAN_TRUE\n              | BOOLEAN_FALSEvector : LBRACKET multipleObjects RBRACKET\n               | LPAREN VECTOR multipleObjects RPARENfunction : FUNCTION_GET sequential_colls NUMBERfunction : FUNCTION_COUNT sequential_collsfunction : FUNCTION_CONJ sequential_colls multipleObjectslist : APOSTROPHE LPAREN multipleObjects RPAREN\n        | LPAREN LIST multipleObjects RPARENsequential_colls : vector\n                        | set\n                        | list\n                        | IDset : SETDEF LCURLYBRA multipleObjects RCURLYBRA\n             | LPAREN SET multipleObjects RPARENsetFunctions_union : SET DIVIDE UNION set setsetFunctions_difference : SET DIVIDE DIFFERENCE set setsetFunctions_intersection : SET DIVIDE INTERSECTION set setfunction_take : LPAREN TAKE NUMBER sequential_collsfunction_drop : LPAREN DROP NUMBER sequential_collsgeneral_expression : math_operation\n                          | bool_operation\n                          | compare_operation\n                          | variable_expression\n                          | setFunctions_union\n                          | setFunctions_intersection\n                          | setFunctions_difference\n                          | function_take\n                          | function_dropnum_expression : LPAREN math_operation RPARENmath_operation : PLUS num_expression NUMBERmath_operation : MINUS num_expression NUMBERmath_operation : DIVIDE num_expression NUMBERmath_operation : TIMES num_expression NUMBERnum_expression : NUMBERbool_expression : LPAREN bool_operation RPARENbool_operation : AND bool_expression bool_expressionbool_operation : OR bool_expression bool_expressionbool_operation : NOT bool_expressionbool_expression : BOOLEAN_TRUE\n     | BOOLEAN_FALSEcompare_operation : GREATERTHAN num_expression num_expressioncompare_operation : LESSTHAN num_expression num_expressioncompare_operation : GREATERTHANEQUALS num_expression num_expressioncompare_operation : LESSTHANEQUALS num_expression num_expressioncompare_operation : EQUAL num_expression num_expressioncompare_operation : NOTEQUAL num_expression num_expressionvariable_expression : DEF ID value\n                            | DEF ID sequential_colls\n                            | DEF ID stamentfor : LPAREN FOR LBRACKET ID sequential_colls RBRACKET general_expression RPAREN\n    | FOR LBRACKET ID ID RBRACKET general_expression RPARENwhile : LPAREN WHILE LPAREN compare_operation RPAREN LPAREN DO general_expression general_expression RPAREN RPARENif : LPAREN IF LPAREN compare_operation RPAREN LPAREN general_expression general_expression RPAREN'
    
_lr_action_items = {'LPAREN':([0,2,7,10,13,14,15,25,26,27,28,29,30,31,32,33,34,35,36,37,42,44,45,46,47,48,49,50,51,52,53,54,55,58,61,62,69,71,76,78,79,80,82,83,84,85,86,87,88,90,91,95,96,97,98,99,123,124,125,126,129,135,136,137,138,140,141,142,143,144,145,146,],[2,3,56,2,56,56,56,72,72,72,72,77,77,77,72,72,72,72,72,72,-1,56,56,-20,-21,-22,-23,-24,-32,-33,-34,-35,56,99,2,2,56,-57,77,-62,-63,77,72,72,72,72,72,72,123,56,56,56,56,56,56,56,3,139,139,139,-25,-52,-58,56,139,139,139,-26,-37,-31,-36,-30,]),'$end':([1,42,],[0,-1,]),'FUNCTION_PRINTLN':([2,123,],[7,7,]),'READLINE':([2,123,],[8,8,]),'FUNCTION_EMPTY':([2,123,],[9,9,]),'TYPE_STR':([2,123,],[10,10,]),'FUNCTION_SUB':([2,123,],[11,11,]),'FUNCTION_SEQ':([2,123,],[12,12,]),'FUNCTION_GET':([2,123,],[13,13,]),'FUNCTION_COUNT':([2,123,],[14,14,]),'FUNCTION_CONJ':([2,123,],[15,15,]),'PLUS':([2,72,123,],[25,25,25,]),'MINUS':([2,72,123,],[26,26,26,]),'DIVIDE':([2,39,72,123,137,],[27,89,27,27,89,]),'TIMES':([2,72,123,],[28,28,28,]),'AND':([2,77,123,],[29,29,29,]),'OR':([2,77,123,],[30,30,30,]),'NOT':([2,77,123,],[31,31,31,]),'GREATERTHAN':([2,123,],[32,32,]),'LESSTHAN':([2,123,],[33,33,]),'GREATERTHANEQUALS':([2,123,],[34,34,]),'LESSTHANEQUALS':([2,123,],[35,35,]),'EQUAL':([2,123,],[36,36,]),'NOTEQUAL':([2,123,],[37,37,]),'DEF':([2,123,],[38,38,]),'SET':([2,56,123,139,],[39,96,137,96,]),'TAKE':([3,],[40,]),'DROP':([3,],[41,]),'RPAREN':([4,5,6,8,16,17,18,19,20,21,22,23,24,42,43,44,45,46,47,48,49,50,51,52,53,54,59,60,61,62,65,66,68,71,78,79,81,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,127,128,129,130,131,132,134,135,136,142,143,144,145,146,147,148,149,],[42,-2,-3,-5,-43,-44,-45,-46,-47,-48,-49,-50,-51,-1,-4,-16,-18,-20,-21,-22,-23,-24,-32,-33,-34,-35,-6,-11,-7,-9,-14,-15,-28,-57,-62,-63,-61,-17,-19,-8,-10,-12,-13,-27,-29,-53,135,-54,-55,-56,-59,136,-60,-64,-65,-66,-67,-68,-69,-70,-71,-72,-41,-42,-25,142,143,144,146,-52,-58,-26,-37,-31,-36,-30,-38,-40,-39,]),'STRING':([7,9,10,11,12,42,44,45,46,47,48,49,50,51,52,53,54,55,61,62,69,88,95,96,97,98,99,129,137,142,143,144,145,146,],[46,59,61,63,65,-1,46,46,-20,-21,-22,-23,-24,-32,-33,-34,-35,46,61,61,46,46,46,46,46,46,46,-25,46,-26,-37,-31,-36,-30,]),'NUMBER':([7,25,26,27,28,32,33,34,35,36,37,40,41,44,45,46,47,48,49,50,51,52,53,54,55,63,64,67,69,70,71,73,74,75,82,83,84,85,86,87,88,95,96,97,98,99,129,135,137,142,143,144,145,146,],[47,71,71,71,71,71,71,71,71,71,71,90,91,47,47,-20,-21,-22,-23,-24,-32,-33,-34,-35,47,102,103,104,47,106,-57,108,109,110,71,71,71,71,71,71,47,47,47,47,47,47,-25,-52,47,-26,-37,-31,-36,-30,]),'FLOAT':([7,44,45,46,47,48,49,50,51,52,53,54,55,69,88,95,96,97,98,99,129,137,142,143,144,145,146,],[48,48,48,-20,-21,-22,-23,-24,-32,-33,-34,-35,48,48,48,48,48,48,48,48,-25,48,-26,-37,-31,-36,-30,]),'BOOLEAN_TRUE':([7,29,30,31,44,45,46,47,48,49,50,51,52,53,54,55,69,76,78,79,80,88,95,96,97,98,99,129,136,137,142,143,144,145,146,],[49,78,78,78,49,49,-20,-21,-22,-23,-24,-32,-33,-34,-35,49,49,78,-62,-63,78,49,49,49,49,49,49,-25,-58,49,-26,-37,-31,-36,-30,]),'BOOLEAN_FALSE':([7,29,30,31,44,45,46,47,48,49,50,51,52,53,54,55,69,76,78,79,80,88,95,96,97,98,99,129,136,137,142,143,144,145,146,],[50,79,79,79,50,50,-20,-21,-22,-23,-24,-32,-33,-34,-35,50,50,79,-62,-63,79,50,50,50,50,50,50,-25,-58,50,-26,-37,-31,-36,-30,]),'ID':([7,11,12,13,14,15,38,44,45,46,47,48,49,50,51,52,53,54,55,69,88,90,91,95,96,97,98,99,129,137,142,143,144,145,146,],[54,64,66,54,54,54,88,54,54,-20,-21,-22,-23,-24,-32,-33,-34,-35,54,54,54,54,54,54,54,54,54,54,-25,54,-26,-37,-31,-36,-30,]),'LBRACKET':([7,13,14,15,44,45,46,47,48,49,50,51,52,53,54,55,69,88,90,91,95,96,97,98,99,129,137,142,143,144,145,146,],[55,55,55,55,55,55,-20,-21,-22,-23,-24,-32,-33,-34,-35,55,55,55,55,55,55,55,55,55,55,-25,55,-26,-37,-31,-36,-30,]),'SETDEF':([7,13,14,15,44,45,46,47,48,49,50,51,52,53,54,55,69,88,90,91,95,96,97,98,99,124,125,126,129,137,138,140,141,142,143,144,145,146,],[57,57,57,57,57,57,-20,-21,-22,-23,-24,-32,-33,-34,-35,57,57,57,57,57,57,57,57,57,57,57,57,57,-25,57,57,57,57,-26,-37,-31,-36,-30,]),'APOSTROPHE':([7,13,14,15,44,45,46,47,48,49,50,51,52,53,54,55,69,88,90,91,95,96,97,98,99,129,137,142,143,144,145,146,],[58,58,58,58,58,58,-20,-21,-22,-23,-24,-32,-33,-34,-35,58,58,58,58,58,58,58,58,58,58,-25,58,-26,-37,-31,-36,-30,]),'RBRACKET':([44,45,46,47,48,49,50,51,52,53,54,92,93,94,129,142,143,144,145,146,],[-16,-18,-20,-21,-22,-23,-24,-32,-33,-34,-35,-17,-19,129,-25,-26,-37,-31,-36,-30,]),'RCURLYBRA':([44,45,46,47,48,49,50,51,52,53,54,92,93,129,133,142,143,144,145,146,],[-16,-18,-20,-21,-22,-23,-24,-32,-33,-34,-35,-17,-19,-25,145,-26,-37,-31,-36,-30,]),'VECTOR':([56,123,],[95,95,]),'LIST':([56,123,],[97,97,]),'LCURLYBRA':([57,],[98,]),'UNION':([89,],[124,]),'INTERSECTION':([89,],[125,]),'DIFFERENCE':([89,],[126,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stament':([0,10,61,62,88,],[1,62,62,62,122,]),'compute':([2,123,],[4,4,]),'function':([2,123,],[5,5,]),'general_expression':([2,123,],[6,6,]),'math_operation':([2,72,123,],[16,107,16,]),'bool_operation':([2,77,123,],[17,112,17,]),'compare_operation':([2,123,],[18,18,]),'variable_expression':([2,123,],[19,19,]),'setFunctions_union':([2,123,],[20,20,]),'setFunctions_intersection':([2,123,],[21,21,]),'setFunctions_difference':([2,123,],[22,22,]),'function_take':([2,123,],[23,23,]),'function_drop':([2,123,],[24,24,]),'multipleObjects':([7,44,45,55,69,95,96,97,98,99,137,],[43,92,93,94,105,130,131,132,133,134,131,]),'value':([7,44,45,55,69,88,95,96,97,98,99,137,],[44,44,44,44,44,120,44,44,44,44,44,44,]),'sequential_colls':([7,13,14,15,44,45,55,69,88,90,91,95,96,97,98,99,137,],[45,67,68,69,45,45,45,45,121,127,128,45,45,45,45,45,45,]),'vector':([7,13,14,15,44,45,55,69,88,90,91,95,96,97,98,99,137,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'set':([7,13,14,15,44,45,55,69,88,90,91,95,96,97,98,99,124,125,126,137,138,140,141,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,138,140,141,52,147,148,149,]),'list':([7,13,14,15,44,45,55,69,88,90,91,95,96,97,98,99,137,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'multiplestring':([10,61,62,],[60,100,101,]),'num_expression':([25,26,27,28,32,33,34,35,36,37,82,83,84,85,86,87,],[70,73,74,75,82,83,84,85,86,87,114,115,116,117,118,119,]),'bool_expression':([29,30,31,76,80,],[76,80,81,111,113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stament","S'",1,None,None,None),
  ('stament -> LPAREN compute RPAREN','stament',3,'p_stament','sintactico_clojure.py',6),
  ('compute -> function','compute',1,'p_compute','sintactico_clojure.py',10),
  ('compute -> general_expression','compute',1,'p_compute','sintactico_clojure.py',11),
  ('function -> FUNCTION_PRINTLN multipleObjects','function',2,'p_function_println','sintactico_clojure.py',16),
  ('function -> READLINE','function',1,'p_function_readLine','sintactico_clojure.py',20),
  ('function -> FUNCTION_EMPTY STRING','function',2,'p_function_empty','sintactico_clojure.py',24),
  ('multiplestring -> STRING','multiplestring',1,'p_multiplestring','sintactico_clojure.py',28),
  ('multiplestring -> STRING multiplestring','multiplestring',2,'p_multiplestring','sintactico_clojure.py',29),
  ('multiplestring -> stament','multiplestring',1,'p_multiplestring','sintactico_clojure.py',30),
  ('multiplestring -> stament multiplestring','multiplestring',2,'p_multiplestring','sintactico_clojure.py',31),
  ('function -> TYPE_STR multiplestring','function',2,'p_function_str','sintactico_clojure.py',35),
  ('function -> FUNCTION_SUB STRING NUMBER','function',3,'p_function_subString','sintactico_clojure.py',39),
  ('function -> FUNCTION_SUB ID NUMBER','function',3,'p_function_subString','sintactico_clojure.py',40),
  ('function -> FUNCTION_SEQ STRING','function',2,'p_function_sequence','sintactico_clojure.py',44),
  ('function -> FUNCTION_SEQ ID','function',2,'p_function_sequence','sintactico_clojure.py',45),
  ('multipleObjects -> value','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',50),
  ('multipleObjects -> value multipleObjects','multipleObjects',2,'p_multipleObjects','sintactico_clojure.py',51),
  ('multipleObjects -> sequential_colls','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',52),
  ('multipleObjects -> sequential_colls multipleObjects','multipleObjects',2,'p_multipleObjects','sintactico_clojure.py',53),
  ('value -> STRING','value',1,'p_value','sintactico_clojure.py',57),
  ('value -> NUMBER','value',1,'p_value','sintactico_clojure.py',58),
  ('value -> FLOAT','value',1,'p_value','sintactico_clojure.py',59),
  ('value -> BOOLEAN_TRUE','value',1,'p_value','sintactico_clojure.py',60),
  ('value -> BOOLEAN_FALSE','value',1,'p_value','sintactico_clojure.py',61),
  ('vector -> LBRACKET multipleObjects RBRACKET','vector',3,'p_vector','sintactico_clojure.py',65),
  ('vector -> LPAREN VECTOR multipleObjects RPAREN','vector',4,'p_vector','sintactico_clojure.py',66),
  ('function -> FUNCTION_GET sequential_colls NUMBER','function',3,'p_function_get','sintactico_clojure.py',71),
  ('function -> FUNCTION_COUNT sequential_colls','function',2,'p_function_count','sintactico_clojure.py',75),
  ('function -> FUNCTION_CONJ sequential_colls multipleObjects','function',3,'p_function_conj','sintactico_clojure.py',79),
  ('list -> APOSTROPHE LPAREN multipleObjects RPAREN','list',4,'p_list','sintactico_clojure.py',89),
  ('list -> LPAREN LIST multipleObjects RPAREN','list',4,'p_list','sintactico_clojure.py',90),
  ('sequential_colls -> vector','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',94),
  ('sequential_colls -> set','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',95),
  ('sequential_colls -> list','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',96),
  ('sequential_colls -> ID','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',97),
  ('set -> SETDEF LCURLYBRA multipleObjects RCURLYBRA','set',4,'p_set','sintactico_clojure.py',101),
  ('set -> LPAREN SET multipleObjects RPAREN','set',4,'p_set','sintactico_clojure.py',102),
  ('setFunctions_union -> SET DIVIDE UNION set set','setFunctions_union',5,'p_setFunctions_union','sintactico_clojure.py',106),
  ('setFunctions_difference -> SET DIVIDE DIFFERENCE set set','setFunctions_difference',5,'p_setFunctions_difference','sintactico_clojure.py',110),
  ('setFunctions_intersection -> SET DIVIDE INTERSECTION set set','setFunctions_intersection',5,'p_setFunctions_intersection','sintactico_clojure.py',114),
  ('function_take -> LPAREN TAKE NUMBER sequential_colls','function_take',4,'p_function_take','sintactico_clojure.py',118),
  ('function_drop -> LPAREN DROP NUMBER sequential_colls','function_drop',4,'p_function_drop','sintactico_clojure.py',122),
  ('general_expression -> math_operation','general_expression',1,'p_general_expression','sintactico_clojure.py',131),
  ('general_expression -> bool_operation','general_expression',1,'p_general_expression','sintactico_clojure.py',132),
  ('general_expression -> compare_operation','general_expression',1,'p_general_expression','sintactico_clojure.py',133),
  ('general_expression -> variable_expression','general_expression',1,'p_general_expression','sintactico_clojure.py',134),
  ('general_expression -> setFunctions_union','general_expression',1,'p_general_expression','sintactico_clojure.py',135),
  ('general_expression -> setFunctions_intersection','general_expression',1,'p_general_expression','sintactico_clojure.py',136),
  ('general_expression -> setFunctions_difference','general_expression',1,'p_general_expression','sintactico_clojure.py',137),
  ('general_expression -> function_take','general_expression',1,'p_general_expression','sintactico_clojure.py',138),
  ('general_expression -> function_drop','general_expression',1,'p_general_expression','sintactico_clojure.py',139),
  ('num_expression -> LPAREN math_operation RPAREN','num_expression',3,'p_num_expression','sintactico_clojure.py',143),
  ('math_operation -> PLUS num_expression NUMBER','math_operation',3,'p_operation_plus','sintactico_clojure.py',147),
  ('math_operation -> MINUS num_expression NUMBER','math_operation',3,'p_operation_minus','sintactico_clojure.py',151),
  ('math_operation -> DIVIDE num_expression NUMBER','math_operation',3,'p_operation_divide','sintactico_clojure.py',155),
  ('math_operation -> TIMES num_expression NUMBER','math_operation',3,'p_operation_times','sintactico_clojure.py',159),
  ('num_expression -> NUMBER','num_expression',1,'p_number','sintactico_clojure.py',163),
  ('bool_expression -> LPAREN bool_operation RPAREN','bool_expression',3,'p_boolean_expression','sintactico_clojure.py',168),
  ('bool_operation -> AND bool_expression bool_expression','bool_operation',3,'p_bool_operation_and','sintactico_clojure.py',172),
  ('bool_operation -> OR bool_expression bool_expression','bool_operation',3,'p_bool_operation_or','sintactico_clojure.py',176),
  ('bool_operation -> NOT bool_expression','bool_operation',2,'p_bool_operation_not','sintactico_clojure.py',180),
  ('bool_expression -> BOOLEAN_TRUE','bool_expression',1,'p_bool_type','sintactico_clojure.py',184),
  ('bool_expression -> BOOLEAN_FALSE','bool_expression',1,'p_bool_type','sintactico_clojure.py',185),
  ('compare_operation -> GREATERTHAN num_expression num_expression','compare_operation',3,'p_compare_operation_greaterthan','sintactico_clojure.py',190),
  ('compare_operation -> LESSTHAN num_expression num_expression','compare_operation',3,'p_compare_operation_lessthan','sintactico_clojure.py',194),
  ('compare_operation -> GREATERTHANEQUALS num_expression num_expression','compare_operation',3,'p_compare_operation_greaterthan_equals','sintactico_clojure.py',198),
  ('compare_operation -> LESSTHANEQUALS num_expression num_expression','compare_operation',3,'p_compare_operation_lessthan_equals','sintactico_clojure.py',202),
  ('compare_operation -> EQUAL num_expression num_expression','compare_operation',3,'p_compare_operation_equal','sintactico_clojure.py',206),
  ('compare_operation -> NOTEQUAL num_expression num_expression','compare_operation',3,'p_compare_operation_notequal','sintactico_clojure.py',210),
  ('variable_expression -> DEF ID value','variable_expression',3,'p_variable_expression_statemt','sintactico_clojure.py',215),
  ('variable_expression -> DEF ID sequential_colls','variable_expression',3,'p_variable_expression_statemt','sintactico_clojure.py',216),
  ('variable_expression -> DEF ID stament','variable_expression',3,'p_variable_expression_statemt','sintactico_clojure.py',217),
  ('for -> LPAREN FOR LBRACKET ID sequential_colls RBRACKET general_expression RPAREN','for',8,'p_for','sintactico_clojure.py',222),
  ('for -> FOR LBRACKET ID ID RBRACKET general_expression RPAREN','for',7,'p_for','sintactico_clojure.py',223),
  ('while -> LPAREN WHILE LPAREN compare_operation RPAREN LPAREN DO general_expression general_expression RPAREN RPAREN','while',11,'p_while','sintactico_clojure.py',226),
  ('if -> LPAREN IF LPAREN compare_operation RPAREN LPAREN general_expression general_expression RPAREN','if',9,'p_if','sintactico_clojure.py',229),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APOSTROPHE AT BOOLEAN_FALSE BOOLEAN_TRUE DEF DEFN DIFFERENCE DIVIDE DO DOUBLE_POINT DROP ELSE EQUAL EXCLAMATION FLOAT FOR FUNCTION_CONJ FUNCTION_COUNT FUNCTION_EMPTY FUNCTION_GET FUNCTION_NTH FUNCTION_PRINTLN FUNCTION_SEQ FUNCTION_SUB GREATERTHAN GREATERTHANEQUALS ID IF INTERSECTION LBRACKET LCURLYBRA LESSTHAN LESSTHANEQUALS LIST LPAREN MINUS NOT NOTEQUAL NULL NUMBER OR PERCENTAJE PLUS POINT QUESTION RBRACKET RCURLYBRA READLINE RPAREN SET SETDEF STRING TAKE TIMES TYPE_STR UNION VECTOR WHILEstament : LPAREN compute RPARENcompute : function\n                | general_expression\n                | control_structure code_block\n                | whilecode_block : LPAREN function RPAREN\n                   | LPAREN general_expression RPAREN\n                   | LPAREN function RPAREN code_block \n                   | LPAREN general_expression RPAREN code_block function : FUNCTION_PRINTLN multipleObjectsfunction : READLINEfunction : FUNCTION_EMPTY STRINGmultiplestring : STRING\n                        | STRING multiplestring\n                        | stament\n                        | stament multiplestringfunction : TYPE_STR multiplestringfunction : FUNCTION_SUB STRING NUMBER\n                 | FUNCTION_SUB ID NUMBERfunction : FUNCTION_SEQ STRING\n                 | FUNCTION_SEQ IDmultipleObjects : value\n                        | value multipleObjects\n                        | sequential_colls\n                        | sequential_colls multipleObjectsvalue : STRING\n              | NUMBER\n              | FLOAT\n              | BOOLEAN_TRUE\n              | BOOLEAN_FALSE\n              | NULLvector : LBRACKET multipleObjects RBRACKET\n               | LPAREN VECTOR multipleObjects RPARENfunction : FUNCTION_GET sequential_colls NUMBERfunction : FUNCTION_COUNT sequential_collsfunction : FUNCTION_CONJ sequential_colls multipleObjectslist : APOSTROPHE LPAREN multipleObjects RPAREN\n        | LPAREN LIST multipleObjects RPARENsequential_colls : vector\n                        | set\n                        | list\n                        | IDset : SETDEF LCURLYBRA multipleObjects RCURLYBRA\n             | LPAREN SET multipleObjects RPARENsetFunctions_union : SET DIVIDE UNION set setsetFunctions_difference : SET DIVIDE DIFFERENCE set setsetFunctions_intersection : SET DIVIDE INTERSECTION set setfunction_take : TAKE NUMBER sequential_collsfunction_drop : DROP NUMBER sequential_collsgeneral_expression : math_operation\n                          | boolean_operation\n                          | variable_expression\n                          | setFunctions_union\n                          | setFunctions_intersection\n                          | setFunctions_difference\n                          | function_take\n                          | function_dropnum_expression : LPAREN math_operation RPARENmath_operation : PLUS num_expression num_expressionmath_operation : MINUS num_expression num_expressionmath_operation : DIVIDE num_expression num_expressionmath_operation : TIMES num_expression num_expressionnum_expression : NUMBER\n                      | IDboolean_operation : bool_operation\n                          | compare_operationbool_expression : LPAREN bool_operation RPARENbool_operation : AND bool_expression bool_expressionbool_operation : OR bool_expression bool_expressionbool_operation : NOT bool_expressionbool_expression : BOOLEAN_TRUE\n     | BOOLEAN_FALSE\n     | IDcompare_operation : GREATERTHAN num_expression num_expressioncompare_operation : LESSTHAN num_expression num_expressioncompare_operation : GREATERTHANEQUALS num_expression num_expressioncompare_operation : LESSTHANEQUALS num_expression num_expressioncompare_operation : EQUAL num_expression num_expressioncompare_operation : NOTEQUAL num_expression num_expressionvariable_expression : DEF ID value\n                            | DEF ID sequential_colls\n                            | DEF ID stamentcontrol_structure : if\n                          | forfor : FOR LBRACKET ID sequential_colls RBRACKET\n           | FOR LBRACKET ID ID RBRACKETwhile : WHILE LPAREN boolean_operation RPAREN dodo : LPAREN DO code_block RPARENif : IF LPAREN boolean_operation RPAREN '
    
_lr_action_items = {'LPAREN':([0,6,8,11,14,15,16,25,26,27,28,29,30,31,38,40,41,42,43,44,45,46,47,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,68,71,72,79,81,83,84,85,86,87,88,90,91,94,96,97,98,99,101,102,103,104,105,106,112,113,114,115,116,133,134,135,139,149,150,151,157,158,159,160,162,163,164,167,170,171,172,173,174,180,181,182,],[2,51,66,2,66,66,66,-83,-84,80,82,82,82,82,92,95,95,95,82,82,82,82,82,82,-1,66,66,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,66,116,2,2,66,82,-63,-64,82,82,82,132,66,66,95,-71,-72,-73,95,82,82,82,82,82,82,66,66,66,66,66,161,161,161,66,51,51,-32,175,-58,66,161,161,161,-89,-67,-33,-44,-38,-43,-37,-86,-85,51,]),'$end':([1,49,],[0,-1,]),'FUNCTION_PRINTLN':([2,51,132,],[8,8,8,]),'READLINE':([2,51,132,],[9,9,9,]),'FUNCTION_EMPTY':([2,51,132,],[10,10,10,]),'TYPE_STR':([2,51,132,],[11,11,11,]),'FUNCTION_SUB':([2,51,132,],[12,12,12,]),'FUNCTION_SEQ':([2,51,132,],[13,13,13,]),'FUNCTION_GET':([2,51,132,],[14,14,14,]),'FUNCTION_COUNT':([2,51,132,],[15,15,15,]),'FUNCTION_CONJ':([2,51,132,],[16,16,16,]),'WHILE':([2,132,],[27,27,]),'PLUS':([2,51,82,132,],[28,28,28,28,]),'MINUS':([2,51,82,132,],[29,29,29,29,]),'DIVIDE':([2,35,51,82,132,159,],[30,89,30,30,30,89,]),'TIMES':([2,51,82,132,],[31,31,31,31,]),'DEF':([2,51,132,],[34,34,34,]),'SET':([2,51,66,132,161,],[35,35,113,159,113,]),'TAKE':([2,51,132,],[36,36,36,]),'DROP':([2,51,132,],[37,37,37,]),'IF':([2,132,],[38,38,]),'FOR':([2,132,],[39,39,]),'AND':([2,51,80,92,95,132,],[40,40,40,40,40,40,]),'OR':([2,51,80,92,95,132,],[41,41,41,41,41,41,]),'NOT':([2,51,80,92,95,132,],[42,42,42,42,42,42,]),'GREATERTHAN':([2,51,80,92,132,],[43,43,43,43,43,]),'LESSTHAN':([2,51,80,92,132,],[44,44,44,44,44,]),'GREATERTHANEQUALS':([2,51,80,92,132,],[45,45,45,45,45,]),'LESSTHANEQUALS':([2,51,80,92,132,],[46,46,46,46,46,]),'EQUAL':([2,51,80,92,132,],[47,47,47,47,47,]),'NOTEQUAL':([2,51,80,92,132,],[48,48,48,48,48,]),'RPAREN':([3,4,5,7,9,17,18,19,20,21,22,23,24,32,33,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,69,70,71,72,75,76,78,83,84,96,97,98,100,107,108,109,110,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,158,167,168,169,170,171,172,173,174,176,177,178,179,183,184,],[49,-2,-3,-5,-11,-50,-51,-52,-53,-54,-55,-56,-57,-65,-66,-1,-4,-10,-22,-24,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,-12,-17,-13,-15,-20,-21,-35,-63,-64,-71,-72,-73,-70,149,150,-23,-25,-14,-16,-18,-19,-34,-36,157,-59,158,-60,-61,-62,-80,-81,-82,-48,-49,164,-68,167,-69,-74,-75,-76,-77,-78,-79,-6,-7,-32,170,171,172,174,-58,-67,-8,-9,-33,-44,-38,-43,-37,-87,-45,-47,-46,184,-88,]),'STRING':([8,10,11,12,13,49,53,54,55,56,57,58,59,60,61,62,63,64,65,71,72,79,88,112,113,114,115,116,151,159,170,171,172,173,174,],[55,69,71,73,75,-1,55,55,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,55,71,71,55,55,55,55,55,55,55,-32,55,-33,-44,-38,-43,-37,]),'NUMBER':([8,28,29,30,31,36,37,43,44,45,46,47,48,53,54,55,56,57,58,59,60,61,62,63,64,65,73,74,77,79,81,83,84,85,86,87,88,101,102,103,104,105,106,112,113,114,115,116,151,158,159,170,171,172,173,174,],[56,83,83,83,83,90,91,83,83,83,83,83,83,56,56,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,56,119,120,121,56,83,-63,-64,83,83,83,56,83,83,83,83,83,83,56,56,56,56,56,-32,-58,56,-33,-44,-38,-43,-37,]),'FLOAT':([8,53,54,55,56,57,58,59,60,61,62,63,64,65,79,88,112,113,114,115,116,151,159,170,171,172,173,174,],[57,57,57,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,57,57,57,57,57,57,57,57,-32,57,-33,-44,-38,-43,-37,]),'BOOLEAN_TRUE':([8,40,41,42,53,54,55,56,57,58,59,60,61,62,63,64,65,79,88,94,96,97,98,99,112,113,114,115,116,151,159,167,170,171,172,173,174,],[58,96,96,96,58,58,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,58,58,58,96,-71,-72,-73,96,58,58,58,58,58,-32,58,-67,-33,-44,-38,-43,-37,]),'BOOLEAN_FALSE':([8,40,41,42,53,54,55,56,57,58,59,60,61,62,63,64,65,79,88,94,96,97,98,99,112,113,114,115,116,151,159,167,170,171,172,173,174,],[59,97,97,97,59,59,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,59,59,59,97,-71,-72,-73,97,59,59,59,59,59,-32,59,-67,-33,-44,-38,-43,-37,]),'NULL':([8,53,54,55,56,57,58,59,60,61,62,63,64,65,79,88,112,113,114,115,116,151,159,170,171,172,173,174,],[60,60,60,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,60,60,60,60,60,60,60,60,-32,60,-33,-44,-38,-43,-37,]),'ID':([8,12,13,14,15,16,28,29,30,31,34,40,41,42,43,44,45,46,47,48,53,54,55,56,57,58,59,60,61,62,63,64,65,79,81,83,84,85,86,87,88,90,91,93,94,96,97,98,99,101,102,103,104,105,106,112,113,114,115,116,139,151,158,159,167,170,171,172,173,174,],[64,74,76,64,64,64,84,84,84,84,88,98,98,98,84,84,84,84,84,84,64,64,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,64,64,84,-63,-64,84,84,84,64,64,64,139,98,-71,-72,-73,98,84,84,84,84,84,84,64,64,64,64,64,165,-32,-58,64,-67,-33,-44,-38,-43,-37,]),'LBRACKET':([8,14,15,16,39,53,54,55,56,57,58,59,60,61,62,63,64,65,79,88,90,91,112,113,114,115,116,139,151,159,170,171,172,173,174,],[65,65,65,65,93,65,65,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,65,65,65,65,65,65,65,65,65,65,65,-32,65,-33,-44,-38,-43,-37,]),'SETDEF':([8,14,15,16,53,54,55,56,57,58,59,60,61,62,63,64,65,79,88,90,91,112,113,114,115,116,133,134,135,139,151,159,160,162,163,170,171,172,173,174,],[67,67,67,67,67,67,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-32,67,67,67,67,-33,-44,-38,-43,-37,]),'APOSTROPHE':([8,14,15,16,53,54,55,56,57,58,59,60,61,62,63,64,65,79,88,90,91,112,113,114,115,116,139,151,159,170,171,172,173,174,],[68,68,68,68,68,68,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,68,68,68,68,68,68,68,68,68,68,68,-32,68,-33,-44,-38,-43,-37,]),'RBRACKET':([53,54,55,56,57,58,59,60,61,62,63,64,109,110,111,151,165,166,170,171,172,173,174,],[-22,-24,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,-23,-25,151,-32,180,181,-33,-44,-38,-43,-37,]),'RCURLYBRA':([53,54,55,56,57,58,59,60,61,62,63,64,109,110,151,155,170,171,172,173,174,],[-22,-24,-26,-27,-28,-29,-30,-31,-39,-40,-41,-42,-23,-25,-32,173,-33,-44,-38,-43,-37,]),'VECTOR':([66,132,],[112,112,]),'LIST':([66,132,],[114,114,]),'LCURLYBRA':([67,],[115,]),'UNION':([89,],[133,]),'INTERSECTION':([89,],[134,]),'DIFFERENCE':([89,],[135,]),'DO':([175,],[182,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stament':([0,11,71,72,88,],[1,72,72,72,131,]),'compute':([2,132,],[3,3,]),'function':([2,51,132,],[4,107,4,]),'general_expression':([2,51,132,],[5,108,5,]),'control_structure':([2,132,],[6,6,]),'while':([2,132,],[7,7,]),'math_operation':([2,51,82,132,],[17,17,125,17,]),'boolean_operation':([2,51,80,92,132,],[18,18,123,138,18,]),'variable_expression':([2,51,132,],[19,19,19,]),'setFunctions_union':([2,51,132,],[20,20,20,]),'setFunctions_intersection':([2,51,132,],[21,21,21,]),'setFunctions_difference':([2,51,132,],[22,22,22,]),'function_take':([2,51,132,],[23,23,23,]),'function_drop':([2,51,132,],[24,24,24,]),'if':([2,132,],[25,25,]),'for':([2,132,],[26,26,]),'bool_operation':([2,51,80,92,95,132,],[32,32,32,32,141,32,]),'compare_operation':([2,51,80,92,132,],[33,33,33,33,33,]),'code_block':([6,149,150,182,],[50,168,169,183,]),'multipleObjects':([8,53,54,65,79,112,113,114,115,116,159,],[52,109,110,111,122,152,153,154,155,156,153,]),'value':([8,53,54,65,79,88,112,113,114,115,116,159,],[53,53,53,53,53,129,53,53,53,53,53,53,]),'sequential_colls':([8,14,15,16,53,54,65,79,88,90,91,112,113,114,115,116,139,159,],[54,77,78,79,54,54,54,54,130,136,137,54,54,54,54,54,166,54,]),'vector':([8,14,15,16,53,54,65,79,88,90,91,112,113,114,115,116,139,159,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'set':([8,14,15,16,53,54,65,79,88,90,91,112,113,114,115,116,133,134,135,139,159,160,162,163,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,160,162,163,62,62,177,178,179,]),'list':([8,14,15,16,53,54,65,79,88,90,91,112,113,114,115,116,139,159,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'multiplestring':([11,71,72,],[70,117,118,]),'num_expression':([28,29,30,31,43,44,45,46,47,48,81,85,86,87,101,102,103,104,105,106,],[81,85,86,87,101,102,103,104,105,106,124,126,127,128,143,144,145,146,147,148,]),'bool_expression':([40,41,42,94,99,],[94,99,100,140,142,]),'do':([157,],[176,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stament","S'",1,None,None,None),
  ('stament -> LPAREN compute RPAREN','stament',3,'p_stament','sintactico_clojure.py',6),
  ('compute -> function','compute',1,'p_compute','sintactico_clojure.py',10),
  ('compute -> general_expression','compute',1,'p_compute','sintactico_clojure.py',11),
  ('compute -> control_structure code_block','compute',2,'p_compute','sintactico_clojure.py',12),
  ('compute -> while','compute',1,'p_compute','sintactico_clojure.py',13),
  ('code_block -> LPAREN function RPAREN','code_block',3,'p_code_block','sintactico_clojure.py',17),
  ('code_block -> LPAREN general_expression RPAREN','code_block',3,'p_code_block','sintactico_clojure.py',18),
  ('code_block -> LPAREN function RPAREN code_block','code_block',4,'p_code_block','sintactico_clojure.py',19),
  ('code_block -> LPAREN general_expression RPAREN code_block','code_block',4,'p_code_block','sintactico_clojure.py',20),
  ('function -> FUNCTION_PRINTLN multipleObjects','function',2,'p_function_println','sintactico_clojure.py',24),
  ('function -> READLINE','function',1,'p_function_readLine','sintactico_clojure.py',28),
  ('function -> FUNCTION_EMPTY STRING','function',2,'p_function_empty','sintactico_clojure.py',32),
  ('multiplestring -> STRING','multiplestring',1,'p_multiplestring','sintactico_clojure.py',36),
  ('multiplestring -> STRING multiplestring','multiplestring',2,'p_multiplestring','sintactico_clojure.py',37),
  ('multiplestring -> stament','multiplestring',1,'p_multiplestring','sintactico_clojure.py',38),
  ('multiplestring -> stament multiplestring','multiplestring',2,'p_multiplestring','sintactico_clojure.py',39),
  ('function -> TYPE_STR multiplestring','function',2,'p_function_str','sintactico_clojure.py',43),
  ('function -> FUNCTION_SUB STRING NUMBER','function',3,'p_function_subString','sintactico_clojure.py',47),
  ('function -> FUNCTION_SUB ID NUMBER','function',3,'p_function_subString','sintactico_clojure.py',48),
  ('function -> FUNCTION_SEQ STRING','function',2,'p_function_sequence','sintactico_clojure.py',52),
  ('function -> FUNCTION_SEQ ID','function',2,'p_function_sequence','sintactico_clojure.py',53),
  ('multipleObjects -> value','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',58),
  ('multipleObjects -> value multipleObjects','multipleObjects',2,'p_multipleObjects','sintactico_clojure.py',59),
  ('multipleObjects -> sequential_colls','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',60),
  ('multipleObjects -> sequential_colls multipleObjects','multipleObjects',2,'p_multipleObjects','sintactico_clojure.py',61),
  ('value -> STRING','value',1,'p_value','sintactico_clojure.py',65),
  ('value -> NUMBER','value',1,'p_value','sintactico_clojure.py',66),
  ('value -> FLOAT','value',1,'p_value','sintactico_clojure.py',67),
  ('value -> BOOLEAN_TRUE','value',1,'p_value','sintactico_clojure.py',68),
  ('value -> BOOLEAN_FALSE','value',1,'p_value','sintactico_clojure.py',69),
  ('value -> NULL','value',1,'p_value','sintactico_clojure.py',70),
  ('vector -> LBRACKET multipleObjects RBRACKET','vector',3,'p_vector','sintactico_clojure.py',74),
  ('vector -> LPAREN VECTOR multipleObjects RPAREN','vector',4,'p_vector','sintactico_clojure.py',75),
  ('function -> FUNCTION_GET sequential_colls NUMBER','function',3,'p_function_get','sintactico_clojure.py',80),
  ('function -> FUNCTION_COUNT sequential_colls','function',2,'p_function_count','sintactico_clojure.py',84),
  ('function -> FUNCTION_CONJ sequential_colls multipleObjects','function',3,'p_function_conj','sintactico_clojure.py',88),
  ('list -> APOSTROPHE LPAREN multipleObjects RPAREN','list',4,'p_list','sintactico_clojure.py',98),
  ('list -> LPAREN LIST multipleObjects RPAREN','list',4,'p_list','sintactico_clojure.py',99),
  ('sequential_colls -> vector','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',103),
  ('sequential_colls -> set','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',104),
  ('sequential_colls -> list','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',105),
  ('sequential_colls -> ID','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',106),
  ('set -> SETDEF LCURLYBRA multipleObjects RCURLYBRA','set',4,'p_set','sintactico_clojure.py',110),
  ('set -> LPAREN SET multipleObjects RPAREN','set',4,'p_set','sintactico_clojure.py',111),
  ('setFunctions_union -> SET DIVIDE UNION set set','setFunctions_union',5,'p_setFunctions_union','sintactico_clojure.py',115),
  ('setFunctions_difference -> SET DIVIDE DIFFERENCE set set','setFunctions_difference',5,'p_setFunctions_difference','sintactico_clojure.py',119),
  ('setFunctions_intersection -> SET DIVIDE INTERSECTION set set','setFunctions_intersection',5,'p_setFunctions_intersection','sintactico_clojure.py',123),
  ('function_take -> TAKE NUMBER sequential_colls','function_take',3,'p_function_take','sintactico_clojure.py',127),
  ('function_drop -> DROP NUMBER sequential_colls','function_drop',3,'p_function_drop','sintactico_clojure.py',131),
  ('general_expression -> math_operation','general_expression',1,'p_general_expression','sintactico_clojure.py',140),
  ('general_expression -> boolean_operation','general_expression',1,'p_general_expression','sintactico_clojure.py',141),
  ('general_expression -> variable_expression','general_expression',1,'p_general_expression','sintactico_clojure.py',142),
  ('general_expression -> setFunctions_union','general_expression',1,'p_general_expression','sintactico_clojure.py',143),
  ('general_expression -> setFunctions_intersection','general_expression',1,'p_general_expression','sintactico_clojure.py',144),
  ('general_expression -> setFunctions_difference','general_expression',1,'p_general_expression','sintactico_clojure.py',145),
  ('general_expression -> function_take','general_expression',1,'p_general_expression','sintactico_clojure.py',146),
  ('general_expression -> function_drop','general_expression',1,'p_general_expression','sintactico_clojure.py',147),
  ('num_expression -> LPAREN math_operation RPAREN','num_expression',3,'p_num_expression','sintactico_clojure.py',151),
  ('math_operation -> PLUS num_expression num_expression','math_operation',3,'p_operation_plus','sintactico_clojure.py',155),
  ('math_operation -> MINUS num_expression num_expression','math_operation',3,'p_operation_minus','sintactico_clojure.py',159),
  ('math_operation -> DIVIDE num_expression num_expression','math_operation',3,'p_operation_divide','sintactico_clojure.py',163),
  ('math_operation -> TIMES num_expression num_expression','math_operation',3,'p_operation_times','sintactico_clojure.py',167),
  ('num_expression -> NUMBER','num_expression',1,'p_number','sintactico_clojure.py',171),
  ('num_expression -> ID','num_expression',1,'p_number','sintactico_clojure.py',172),
  ('boolean_operation -> bool_operation','boolean_operation',1,'p_boolean_operation','sintactico_clojure.py',177),
  ('boolean_operation -> compare_operation','boolean_operation',1,'p_boolean_operation','sintactico_clojure.py',178),
  ('bool_expression -> LPAREN bool_operation RPAREN','bool_expression',3,'p_boolean_expression','sintactico_clojure.py',182),
  ('bool_operation -> AND bool_expression bool_expression','bool_operation',3,'p_bool_operation_and','sintactico_clojure.py',186),
  ('bool_operation -> OR bool_expression bool_expression','bool_operation',3,'p_bool_operation_or','sintactico_clojure.py',190),
  ('bool_operation -> NOT bool_expression','bool_operation',2,'p_bool_operation_not','sintactico_clojure.py',194),
  ('bool_expression -> BOOLEAN_TRUE','bool_expression',1,'p_bool_type','sintactico_clojure.py',198),
  ('bool_expression -> BOOLEAN_FALSE','bool_expression',1,'p_bool_type','sintactico_clojure.py',199),
  ('bool_expression -> ID','bool_expression',1,'p_bool_type','sintactico_clojure.py',200),
  ('compare_operation -> GREATERTHAN num_expression num_expression','compare_operation',3,'p_compare_operation_greaterthan','sintactico_clojure.py',205),
  ('compare_operation -> LESSTHAN num_expression num_expression','compare_operation',3,'p_compare_operation_lessthan','sintactico_clojure.py',209),
  ('compare_operation -> GREATERTHANEQUALS num_expression num_expression','compare_operation',3,'p_compare_operation_greaterthan_equals','sintactico_clojure.py',213),
  ('compare_operation -> LESSTHANEQUALS num_expression num_expression','compare_operation',3,'p_compare_operation_lessthan_equals','sintactico_clojure.py',217),
  ('compare_operation -> EQUAL num_expression num_expression','compare_operation',3,'p_compare_operation_equal','sintactico_clojure.py',221),
  ('compare_operation -> NOTEQUAL num_expression num_expression','compare_operation',3,'p_compare_operation_notequal','sintactico_clojure.py',225),
  ('variable_expression -> DEF ID value','variable_expression',3,'p_variable_expression_statemt','sintactico_clojure.py',230),
  ('variable_expression -> DEF ID sequential_colls','variable_expression',3,'p_variable_expression_statemt','sintactico_clojure.py',231),
  ('variable_expression -> DEF ID stament','variable_expression',3,'p_variable_expression_statemt','sintactico_clojure.py',232),
  ('control_structure -> if','control_structure',1,'p_control_structure','sintactico_clojure.py',238),
  ('control_structure -> for','control_structure',1,'p_control_structure','sintactico_clojure.py',239),
  ('for -> FOR LBRACKET ID sequential_colls RBRACKET','for',5,'p_for','sintactico_clojure.py',243),
  ('for -> FOR LBRACKET ID ID RBRACKET','for',5,'p_for','sintactico_clojure.py',244),
  ('while -> WHILE LPAREN boolean_operation RPAREN do','while',5,'p_while','sintactico_clojure.py',248),
  ('do -> LPAREN DO code_block RPAREN','do',4,'p_do_statement','sintactico_clojure.py',252),
  ('if -> IF LPAREN boolean_operation RPAREN','if',4,'p_if','sintactico_clojure.py',256),
]

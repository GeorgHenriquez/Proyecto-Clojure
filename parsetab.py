
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APOSTROPHE AS BOOLEAN_FALSE BOOLEAN_TRUE DEF DIFFERENCE DIVIDE DO DOUBLE_POINT DROP EQUAL FOR FUNCTION_CONJ FUNCTION_COUNT FUNCTION_EMPTY FUNCTION_GET FUNCTION_NTH FUNCTION_PRINTLN FUNCTION_SEQ FUNCTION_SUB GREATERTHAN GREATERTHANEQUALS ID IF INTERSECTION LBRACKET LCURLYBRA LESSTHAN LESSTHANEQUALS LIST LPAREN MINUS NOT NOTEQUAL NULL NUMBER OR PLUS POINT RBRACKET RCURLYBRA READLINE REQUIRE RPAREN SET SETDEF STRING TAKE TIMES TYPE_STR UNION VECTOR WHILEstament : LPAREN compute RPARENcompute : function\n                | general_expression\n                | control_structure code_block\n                | while\n                | requirecode_block : LPAREN function RPAREN\n                   | LPAREN general_expression RPAREN\n                   | LPAREN compute RPAREN\n                   | LPAREN compute RPAREN code_block \n                   | LPAREN function RPAREN code_block \n                   | LPAREN general_expression RPAREN code_blockfunction : FUNCTION_PRINTLN multipleObjectsfunction : READLINEfunction : FUNCTION_EMPTY STRINGmultiplestring : STRING\n                      | stament\n                      | value\n                      | ID\n                      | multiplestring multiplestringfunction : TYPE_STR multiplestringfunction : FUNCTION_SUB STRING NUMBER\n                 | FUNCTION_SUB ID NUMBERfunction : FUNCTION_SEQ STRING\n                 | FUNCTION_SEQ IDmultipleObjects : value\n                        | sequential_colls\n                        | stament\n                        | multipleObjects multipleObjectsvalue : STRING\n              | NUMBER\n              | BOOLEAN_TRUE\n              | BOOLEAN_FALSE\n              | NULLvector : LBRACKET multipleObjects RBRACKET\n               | LPAREN VECTOR multipleObjects RPARENfunction : FUNCTION_NTH vector NUMBER\n            | FUNCTION_NTH list NUMBER\n            | FUNCTION_NTH ID NUMBERfunction : FUNCTION_GET sequential_colls NUMBERfunction : FUNCTION_COUNT sequential_collsfunction : FUNCTION_CONJ sequential_colls multipleObjectslist : APOSTROPHE LPAREN multipleObjects RPAREN\n        | LPAREN LIST multipleObjects RPARENsequential_colls : vector\n                        | set\n                        | list\n                        | IDset : SETDEF LCURLYBRA multipleObjects RCURLYBRA\n             | LPAREN SET multipleObjects RPARENset_op : set\n              | IDsetFunctions_union : SET DIVIDE UNION set_op set_opsetFunctions_difference : SET DIVIDE DIFFERENCE set_op set_opsetFunctions_intersection : SET DIVIDE INTERSECTION set_op set_opfunction_take : TAKE NUMBER sequential_collsfunction_drop : DROP NUMBER sequential_collsrequire : REQUIRE APOSTROPHE LBRACKET ID POINT ID DOUBLE_POINT AS ID RBRACKET\n                | REQUIRE APOSTROPHE LBRACKET ID POINT SET DOUBLE_POINT AS ID RBRACKETgeneral_expression : math_operation\n                          | boolean_operation\n                          | variable_expression\n                          | setFunctions_union\n                          | setFunctions_intersection\n                          | setFunctions_difference\n                          | function_take\n                          | function_dropnum_expression : LPAREN math_operation RPARENmath_operation : PLUS multipleNumbers num_expression\n                       | PLUS multipleNumbersmath_operation : MINUS multipleNumbers num_expression\n                       | MINUS multipleNumbersmath_operation : DIVIDE multipleNumbers num_expression\n                       | DIVIDE multipleNumbersmath_operation : TIMES multipleNumbers num_expression\n                       | TIMES multipleNumbersnum_expression : NUMBER\n                      | IDmultipleNumbers : multipleNumbers num_expression\n                       | num_expressionboolean_operation : bool_operation\n                          | compare_operationbool_expression : LPAREN bool_operation RPARENbool_operation : AND bool_expression bool_expressionbool_operation : OR bool_expression bool_expressionbool_operation : NOT bool_expressionbool_expression : BOOLEAN_TRUE\n     | BOOLEAN_FALSE\n     | IDcompare_operation : GREATERTHAN num_expression num_expression\n                          | GREATERTHAN num_expression NULL\n                          | GREATERTHAN NULL num_expressioncompare_operation : LESSTHAN num_expression num_expression\n                          | LESSTHAN num_expression NULL\n                          | LESSTHAN NULL num_expressioncompare_operation : GREATERTHANEQUALS num_expression num_expression\n                          | GREATERTHANEQUALS num_expression NULL\n                          | GREATERTHANEQUALS NULL num_expressioncompare_operation : LESSTHANEQUALS num_expression num_expression\n                          | LESSTHANEQUALS num_expression NULL\n                          | LESSTHANEQUALS NULL num_expressioncompare_operation : EQUAL num_expression num_expression\n                          | EQUAL num_expression NULL\n                          | EQUAL NULL num_expressioncompare_operation : NOTEQUAL num_expression num_expression\n                          | NOTEQUAL num_expression NULL\n                          | NOTEQUAL NULL num_expressionvariable_expression : DEF ID value\n                            | DEF ID sequential_colls\n                            | DEF ID stament\n                            | DEF NULLcontrol_structure : if\n                          | forfor : FOR LBRACKET ID sequential_colls RBRACKET\n           | FOR LBRACKET ID ID RBRACKETwhile : WHILE LPAREN boolean_operation RPAREN dodo : LPAREN DO code_block RPARENif : IF LPAREN boolean_operation RPAREN '
    
_lr_action_items = {'LPAREN':([0,6,9,12,15,16,17,18,27,28,29,32,33,34,35,41,43,44,45,46,47,48,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,69,71,73,74,75,76,77,89,93,94,96,97,98,99,100,101,103,104,107,109,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,129,130,131,132,133,134,135,136,143,144,147,148,149,150,152,153,154,161,183,184,185,186,187,188,189,190,191,192,194,195,196,198,199,200,201,204,208,209,210,211,212,219,220,221,],[2,54,68,2,85,87,87,87,-112,-113,90,95,95,95,95,105,108,108,108,95,95,95,95,95,95,-1,68,-26,-27,-28,-30,-31,-32,-33,-34,-45,-46,-47,-48,68,135,2,-16,-17,-18,-19,68,95,-80,-77,-78,95,95,95,68,87,87,108,-87,-88,-89,108,95,95,95,95,95,95,95,95,95,95,95,95,68,68,68,68,68,68,68,2,68,68,197,197,197,-79,-79,-79,-79,87,54,54,54,68,68,68,-35,68,68,213,197,-51,-52,197,197,-68,-118,-83,-36,-50,-44,-49,-43,-115,-114,54,]),'$end':([1,52,],[0,-1,]),'FUNCTION_PRINTLN':([2,54,68,],[9,9,9,]),'READLINE':([2,54,68,],[10,10,10,]),'FUNCTION_EMPTY':([2,54,68,],[11,11,11,]),'TYPE_STR':([2,54,68,],[12,12,12,]),'FUNCTION_SUB':([2,54,68,],[13,13,13,]),'FUNCTION_SEQ':([2,54,68,],[14,14,14,]),'FUNCTION_NTH':([2,54,68,],[15,15,15,]),'FUNCTION_GET':([2,54,68,],[16,16,16,]),'FUNCTION_COUNT':([2,54,68,],[17,17,17,]),'FUNCTION_CONJ':([2,54,68,],[18,18,18,]),'WHILE':([2,54,68,],[29,29,29,]),'REQUIRE':([2,54,68,],[30,30,30,]),'PLUS':([2,54,68,95,],[32,32,32,32,]),'MINUS':([2,54,68,95,],[33,33,33,33,]),'DIVIDE':([2,31,54,68,95,131,],[34,92,34,34,34,92,]),'TIMES':([2,54,68,95,],[35,35,35,35,]),'DEF':([2,54,68,],[38,38,38,]),'SET':([2,54,68,87,197,215,],[31,31,131,143,143,223,]),'TAKE':([2,54,68,],[39,39,39,]),'DROP':([2,54,68,],[40,40,40,]),'IF':([2,54,68,],[41,41,41,]),'FOR':([2,54,68,],[42,42,42,]),'AND':([2,54,68,90,105,108,],[43,43,43,43,43,43,]),'OR':([2,54,68,90,105,108,],[44,44,44,44,44,44,]),'NOT':([2,54,68,90,105,108,],[45,45,45,45,45,45,]),'GREATERTHAN':([2,54,68,90,105,],[46,46,46,46,46,]),'LESSTHAN':([2,54,68,90,105,],[47,47,47,47,47,]),'GREATERTHANEQUALS':([2,54,68,90,105,],[48,48,48,48,48,]),'LESSTHANEQUALS':([2,54,68,90,105,],[49,49,49,49,49,]),'EQUAL':([2,54,68,90,105,],[50,50,50,50,50,]),'NOTEQUAL':([2,54,68,90,105,],[51,51,51,51,51,]),'RPAREN':([3,4,5,7,8,10,19,20,21,22,23,24,25,26,36,37,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,72,73,74,75,76,77,80,81,88,93,94,96,97,98,99,100,102,109,110,111,113,126,127,128,129,136,137,138,139,140,141,142,144,145,150,151,152,153,154,155,156,157,158,159,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,195,196,200,204,205,206,207,208,209,210,211,212,214,216,217,218,224,227,232,233,],[52,-2,-3,-5,-6,-14,-60,-61,-62,-63,-64,-65,-66,-67,-81,-82,-1,-4,-13,-26,-27,-28,-30,-31,-32,-33,-34,-45,-46,-47,-48,-15,-21,-16,-17,-18,-19,-24,-25,-41,-70,-80,-77,-78,-72,-74,-76,-111,-87,-88,-89,-86,183,184,185,-29,-20,-22,-23,-37,-38,-39,-40,-42,192,-69,200,-71,-73,-75,-108,-109,-110,-56,-57,201,-84,204,-85,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-7,-8,-9,208,209,210,-35,212,-51,-52,-68,-83,-11,-12,-10,-36,-50,-44,-49,-43,-116,-53,-55,-54,227,-117,-58,-59,]),'STRING':([9,11,12,13,14,52,55,56,57,58,59,60,61,62,63,64,65,66,67,69,73,74,75,76,77,89,101,129,130,131,132,133,134,135,136,143,144,186,187,188,189,190,191,208,209,210,211,212,],[59,72,74,78,80,-1,59,-26,-27,-28,-30,-31,-32,-33,-34,-45,-46,-47,-48,59,74,-16,-17,-18,-19,59,59,59,59,59,59,59,59,59,74,59,59,59,59,59,-35,59,59,-36,-50,-44,-49,-43,]),'NUMBER':([9,12,32,33,34,35,39,40,46,47,48,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,69,73,74,75,76,77,78,79,82,83,84,86,89,93,94,96,97,98,99,100,101,114,115,116,117,118,119,120,121,122,123,124,125,129,130,131,132,133,134,135,136,143,144,150,152,153,154,186,187,188,189,190,191,200,208,209,210,211,212,],[60,60,96,96,96,96,103,104,96,96,96,96,96,96,-1,60,-26,-27,-28,-30,-31,-32,-33,-34,-45,-46,-47,-48,60,60,-16,-17,-18,-19,137,138,139,140,141,142,60,96,-80,-77,-78,96,96,96,60,96,96,96,96,96,96,96,96,96,96,96,96,60,60,60,60,60,60,60,60,60,60,-79,-79,-79,-79,60,60,60,-35,60,60,-68,-36,-50,-44,-49,-43,]),'BOOLEAN_TRUE':([9,12,43,44,45,52,55,56,57,58,59,60,61,62,63,64,65,66,67,69,73,74,75,76,77,89,101,107,109,110,111,112,129,130,131,132,133,134,135,136,143,144,186,187,188,189,190,191,204,208,209,210,211,212,],[61,61,109,109,109,-1,61,-26,-27,-28,-30,-31,-32,-33,-34,-45,-46,-47,-48,61,61,-16,-17,-18,-19,61,61,109,-87,-88,-89,109,61,61,61,61,61,61,61,61,61,61,61,61,61,-35,61,61,-83,-36,-50,-44,-49,-43,]),'BOOLEAN_FALSE':([9,12,43,44,45,52,55,56,57,58,59,60,61,62,63,64,65,66,67,69,73,74,75,76,77,89,101,107,109,110,111,112,129,130,131,132,133,134,135,136,143,144,186,187,188,189,190,191,204,208,209,210,211,212,],[62,62,110,110,110,-1,62,-26,-27,-28,-30,-31,-32,-33,-34,-45,-46,-47,-48,62,62,-16,-17,-18,-19,62,62,110,-87,-88,-89,110,62,62,62,62,62,62,62,62,62,62,62,62,62,-35,62,62,-83,-36,-50,-44,-49,-43,]),'NULL':([9,12,38,46,47,48,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,69,73,74,75,76,77,89,96,97,101,114,116,118,120,122,124,129,130,131,132,133,134,135,136,143,144,186,187,188,189,190,191,200,208,209,210,211,212,],[63,63,102,115,117,119,121,123,125,-1,63,-26,-27,-28,-30,-31,-32,-33,-34,-45,-46,-47,-48,63,63,-16,-17,-18,-19,63,-77,-78,63,166,169,172,175,178,181,63,63,63,63,63,63,63,63,63,63,63,63,63,-35,63,63,-68,-36,-50,-44,-49,-43,]),'ID':([9,12,13,14,15,16,17,18,32,33,34,35,38,43,44,45,46,47,48,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,69,73,74,75,76,77,89,93,94,96,97,98,99,100,101,103,104,106,107,109,110,111,112,114,115,116,117,118,119,120,121,122,123,124,125,129,130,131,132,133,134,135,136,143,144,146,147,148,149,150,152,153,154,161,186,187,188,189,190,191,194,195,196,198,199,200,204,208,209,210,211,212,215,228,229,],[67,77,79,81,84,67,67,67,97,97,97,97,101,111,111,111,97,97,97,97,97,97,-1,67,-26,-27,-28,-30,-31,-32,-33,-34,-45,-46,-47,-48,67,77,-16,-17,-18,-19,67,97,-80,-77,-78,97,97,97,67,67,67,161,111,-87,-88,-89,111,97,97,97,97,97,97,97,97,97,97,97,97,67,67,67,67,67,67,67,77,67,67,193,196,196,196,-79,-79,-79,-79,202,67,67,67,-35,67,67,196,-51,-52,196,196,-68,-83,-36,-50,-44,-49,-43,222,230,231,]),'LBRACKET':([9,15,16,17,18,42,52,55,56,57,58,59,60,61,62,63,64,65,66,67,69,89,91,101,103,104,129,130,131,132,133,134,135,143,144,161,186,187,188,189,190,191,208,209,210,211,212,],[69,69,69,69,69,106,-1,69,-26,-27,-28,-30,-31,-32,-33,-34,-45,-46,-47,-48,69,69,146,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-35,69,69,-36,-50,-44,-49,-43,]),'SETDEF':([9,16,17,18,52,55,56,57,58,59,60,61,62,63,64,65,66,67,69,89,101,103,104,129,130,131,132,133,134,135,143,144,147,148,149,161,186,187,188,189,190,191,194,195,196,198,199,208,209,210,211,212,],[70,70,70,70,-1,70,-26,-27,-28,-30,-31,-32,-33,-34,-45,-46,-47,-48,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-35,70,70,70,-51,-52,70,70,-36,-50,-44,-49,-43,]),'APOSTROPHE':([9,15,16,17,18,30,52,55,56,57,58,59,60,61,62,63,64,65,66,67,69,89,101,103,104,129,130,131,132,133,134,135,143,144,161,186,187,188,189,190,191,208,209,210,211,212,],[71,71,71,71,71,91,-1,71,-26,-27,-28,-30,-31,-32,-33,-34,-45,-46,-47,-48,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-35,71,71,-36,-50,-44,-49,-43,]),'RBRACKET':([52,56,57,58,59,60,61,62,63,64,65,66,67,129,133,189,202,203,208,209,210,211,212,230,231,],[-1,-26,-27,-28,-30,-31,-32,-33,-34,-45,-46,-47,-48,-29,189,-35,219,220,-36,-50,-44,-49,-43,232,233,]),'RCURLYBRA':([52,56,57,58,59,60,61,62,63,64,65,66,67,129,189,190,208,209,210,211,212,],[-1,-26,-27,-28,-30,-31,-32,-33,-34,-45,-46,-47,-48,-29,-35,211,-36,-50,-44,-49,-43,]),'VECTOR':([68,85,87,],[130,130,130,]),'LIST':([68,85,87,],[132,132,132,]),'LCURLYBRA':([70,],[134,]),'UNION':([92,],[147,]),'INTERSECTION':([92,],[148,]),'DIFFERENCE':([92,],[149,]),'POINT':([193,],[215,]),'DO':([213,],[221,]),'DOUBLE_POINT':([222,223,],[225,226,]),'AS':([225,226,],[228,229,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stament':([0,9,12,55,69,73,89,101,129,130,131,132,133,134,135,136,143,144,186,187,188,190,191,],[1,58,75,58,58,75,58,157,58,58,58,58,58,58,58,75,58,58,58,58,58,58,58,]),'compute':([2,54,68,],[3,128,3,]),'function':([2,54,68,],[4,126,4,]),'general_expression':([2,54,68,],[5,127,5,]),'control_structure':([2,54,68,],[6,6,6,]),'while':([2,54,68,],[7,7,7,]),'require':([2,54,68,],[8,8,8,]),'math_operation':([2,54,68,95,],[19,19,19,151,]),'boolean_operation':([2,54,68,90,105,],[20,20,20,145,160,]),'variable_expression':([2,54,68,],[21,21,21,]),'setFunctions_union':([2,54,68,],[22,22,22,]),'setFunctions_intersection':([2,54,68,],[23,23,23,]),'setFunctions_difference':([2,54,68,],[24,24,24,]),'function_take':([2,54,68,],[25,25,25,]),'function_drop':([2,54,68,],[26,26,26,]),'if':([2,54,68,],[27,27,27,]),'for':([2,54,68,],[28,28,28,]),'bool_operation':([2,54,68,90,105,108,],[36,36,36,36,36,163,]),'compare_operation':([2,54,68,90,105,],[37,37,37,37,37,]),'code_block':([6,183,184,185,221,],[53,205,206,207,224,]),'multipleObjects':([9,55,69,89,129,130,131,132,133,134,135,143,144,186,187,188,190,191,],[55,129,133,144,129,186,187,188,129,190,191,187,129,129,129,129,129,129,]),'value':([9,12,55,69,73,89,101,129,130,131,132,133,134,135,136,143,144,186,187,188,190,191,],[56,76,56,56,76,56,155,56,56,56,56,56,56,56,76,56,56,56,56,56,56,56,]),'sequential_colls':([9,16,17,18,55,69,89,101,103,104,129,130,131,132,133,134,135,143,144,161,186,187,188,190,191,],[57,86,88,89,57,57,57,156,158,159,57,57,57,57,57,57,57,57,57,203,57,57,57,57,57,]),'vector':([9,15,16,17,18,55,69,89,101,103,104,129,130,131,132,133,134,135,143,144,161,186,187,188,190,191,],[64,82,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'set':([9,16,17,18,55,69,89,101,103,104,129,130,131,132,133,134,135,143,144,147,148,149,161,186,187,188,190,191,194,198,199,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,195,195,195,65,65,65,65,65,65,195,195,195,]),'list':([9,15,16,17,18,55,69,89,101,103,104,129,130,131,132,133,134,135,143,144,161,186,187,188,190,191,],[66,83,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'multiplestring':([12,73,136,],[73,136,136,]),'multipleNumbers':([32,33,34,35,],[93,98,99,100,]),'num_expression':([32,33,34,35,46,47,48,49,50,51,93,98,99,100,114,115,116,117,118,119,120,121,122,123,124,125,],[94,94,94,94,114,116,118,120,122,124,150,152,153,154,165,167,168,170,171,173,174,176,177,179,180,182,]),'bool_expression':([43,44,45,107,112,],[107,112,113,162,164,]),'set_op':([147,148,149,194,198,199,],[194,198,199,216,217,218,]),'do':([192,],[214,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stament","S'",1,None,None,None),
  ('stament -> LPAREN compute RPAREN','stament',3,'p_stament','sintactico_clojure.py',6),
  ('compute -> function','compute',1,'p_compute','sintactico_clojure.py',10),
  ('compute -> general_expression','compute',1,'p_compute','sintactico_clojure.py',11),
  ('compute -> control_structure code_block','compute',2,'p_compute','sintactico_clojure.py',12),
  ('compute -> while','compute',1,'p_compute','sintactico_clojure.py',13),
  ('compute -> require','compute',1,'p_compute','sintactico_clojure.py',14),
  ('code_block -> LPAREN function RPAREN','code_block',3,'p_code_block','sintactico_clojure.py',18),
  ('code_block -> LPAREN general_expression RPAREN','code_block',3,'p_code_block','sintactico_clojure.py',19),
  ('code_block -> LPAREN compute RPAREN','code_block',3,'p_code_block','sintactico_clojure.py',20),
  ('code_block -> LPAREN compute RPAREN code_block','code_block',4,'p_code_block','sintactico_clojure.py',21),
  ('code_block -> LPAREN function RPAREN code_block','code_block',4,'p_code_block','sintactico_clojure.py',22),
  ('code_block -> LPAREN general_expression RPAREN code_block','code_block',4,'p_code_block','sintactico_clojure.py',23),
  ('function -> FUNCTION_PRINTLN multipleObjects','function',2,'p_function_println','sintactico_clojure.py',27),
  ('function -> READLINE','function',1,'p_function_readLine','sintactico_clojure.py',31),
  ('function -> FUNCTION_EMPTY STRING','function',2,'p_function_empty','sintactico_clojure.py',35),
  ('multiplestring -> STRING','multiplestring',1,'p_multiplestring','sintactico_clojure.py',39),
  ('multiplestring -> stament','multiplestring',1,'p_multiplestring','sintactico_clojure.py',40),
  ('multiplestring -> value','multiplestring',1,'p_multiplestring','sintactico_clojure.py',41),
  ('multiplestring -> ID','multiplestring',1,'p_multiplestring','sintactico_clojure.py',42),
  ('multiplestring -> multiplestring multiplestring','multiplestring',2,'p_multiplestring','sintactico_clojure.py',43),
  ('function -> TYPE_STR multiplestring','function',2,'p_function_str','sintactico_clojure.py',48),
  ('function -> FUNCTION_SUB STRING NUMBER','function',3,'p_function_subString','sintactico_clojure.py',52),
  ('function -> FUNCTION_SUB ID NUMBER','function',3,'p_function_subString','sintactico_clojure.py',53),
  ('function -> FUNCTION_SEQ STRING','function',2,'p_function_sequence','sintactico_clojure.py',57),
  ('function -> FUNCTION_SEQ ID','function',2,'p_function_sequence','sintactico_clojure.py',58),
  ('multipleObjects -> value','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',63),
  ('multipleObjects -> sequential_colls','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',64),
  ('multipleObjects -> stament','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',65),
  ('multipleObjects -> multipleObjects multipleObjects','multipleObjects',2,'p_multipleObjects','sintactico_clojure.py',66),
  ('value -> STRING','value',1,'p_value','sintactico_clojure.py',70),
  ('value -> NUMBER','value',1,'p_value','sintactico_clojure.py',71),
  ('value -> BOOLEAN_TRUE','value',1,'p_value','sintactico_clojure.py',72),
  ('value -> BOOLEAN_FALSE','value',1,'p_value','sintactico_clojure.py',73),
  ('value -> NULL','value',1,'p_value','sintactico_clojure.py',74),
  ('vector -> LBRACKET multipleObjects RBRACKET','vector',3,'p_vector','sintactico_clojure.py',78),
  ('vector -> LPAREN VECTOR multipleObjects RPAREN','vector',4,'p_vector','sintactico_clojure.py',79),
  ('function -> FUNCTION_NTH vector NUMBER','function',3,'p_function_nth','sintactico_clojure.py',83),
  ('function -> FUNCTION_NTH list NUMBER','function',3,'p_function_nth','sintactico_clojure.py',84),
  ('function -> FUNCTION_NTH ID NUMBER','function',3,'p_function_nth','sintactico_clojure.py',85),
  ('function -> FUNCTION_GET sequential_colls NUMBER','function',3,'p_function_get','sintactico_clojure.py',89),
  ('function -> FUNCTION_COUNT sequential_colls','function',2,'p_function_count','sintactico_clojure.py',93),
  ('function -> FUNCTION_CONJ sequential_colls multipleObjects','function',3,'p_function_conj','sintactico_clojure.py',97),
  ('list -> APOSTROPHE LPAREN multipleObjects RPAREN','list',4,'p_list','sintactico_clojure.py',107),
  ('list -> LPAREN LIST multipleObjects RPAREN','list',4,'p_list','sintactico_clojure.py',108),
  ('sequential_colls -> vector','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',112),
  ('sequential_colls -> set','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',113),
  ('sequential_colls -> list','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',114),
  ('sequential_colls -> ID','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',115),
  ('set -> SETDEF LCURLYBRA multipleObjects RCURLYBRA','set',4,'p_set','sintactico_clojure.py',119),
  ('set -> LPAREN SET multipleObjects RPAREN','set',4,'p_set','sintactico_clojure.py',120),
  ('set_op -> set','set_op',1,'p_set_operation','sintactico_clojure.py',124),
  ('set_op -> ID','set_op',1,'p_set_operation','sintactico_clojure.py',125),
  ('setFunctions_union -> SET DIVIDE UNION set_op set_op','setFunctions_union',5,'p_setFunctions_union','sintactico_clojure.py',129),
  ('setFunctions_difference -> SET DIVIDE DIFFERENCE set_op set_op','setFunctions_difference',5,'p_setFunctions_difference','sintactico_clojure.py',133),
  ('setFunctions_intersection -> SET DIVIDE INTERSECTION set_op set_op','setFunctions_intersection',5,'p_setFunctions_intersection','sintactico_clojure.py',137),
  ('function_take -> TAKE NUMBER sequential_colls','function_take',3,'p_function_take','sintactico_clojure.py',141),
  ('function_drop -> DROP NUMBER sequential_colls','function_drop',3,'p_function_drop','sintactico_clojure.py',145),
  ('require -> REQUIRE APOSTROPHE LBRACKET ID POINT ID DOUBLE_POINT AS ID RBRACKET','require',10,'p_require','sintactico_clojure.py',149),
  ('require -> REQUIRE APOSTROPHE LBRACKET ID POINT SET DOUBLE_POINT AS ID RBRACKET','require',10,'p_require','sintactico_clojure.py',150),
  ('general_expression -> math_operation','general_expression',1,'p_general_expression','sintactico_clojure.py',158),
  ('general_expression -> boolean_operation','general_expression',1,'p_general_expression','sintactico_clojure.py',159),
  ('general_expression -> variable_expression','general_expression',1,'p_general_expression','sintactico_clojure.py',160),
  ('general_expression -> setFunctions_union','general_expression',1,'p_general_expression','sintactico_clojure.py',161),
  ('general_expression -> setFunctions_intersection','general_expression',1,'p_general_expression','sintactico_clojure.py',162),
  ('general_expression -> setFunctions_difference','general_expression',1,'p_general_expression','sintactico_clojure.py',163),
  ('general_expression -> function_take','general_expression',1,'p_general_expression','sintactico_clojure.py',164),
  ('general_expression -> function_drop','general_expression',1,'p_general_expression','sintactico_clojure.py',165),
  ('num_expression -> LPAREN math_operation RPAREN','num_expression',3,'p_num_expression','sintactico_clojure.py',169),
  ('math_operation -> PLUS multipleNumbers num_expression','math_operation',3,'p_operation_plus','sintactico_clojure.py',173),
  ('math_operation -> PLUS multipleNumbers','math_operation',2,'p_operation_plus','sintactico_clojure.py',174),
  ('math_operation -> MINUS multipleNumbers num_expression','math_operation',3,'p_operation_minus','sintactico_clojure.py',178),
  ('math_operation -> MINUS multipleNumbers','math_operation',2,'p_operation_minus','sintactico_clojure.py',179),
  ('math_operation -> DIVIDE multipleNumbers num_expression','math_operation',3,'p_operation_divide','sintactico_clojure.py',183),
  ('math_operation -> DIVIDE multipleNumbers','math_operation',2,'p_operation_divide','sintactico_clojure.py',184),
  ('math_operation -> TIMES multipleNumbers num_expression','math_operation',3,'p_operation_times','sintactico_clojure.py',188),
  ('math_operation -> TIMES multipleNumbers','math_operation',2,'p_operation_times','sintactico_clojure.py',189),
  ('num_expression -> NUMBER','num_expression',1,'p_number','sintactico_clojure.py',193),
  ('num_expression -> ID','num_expression',1,'p_number','sintactico_clojure.py',194),
  ('multipleNumbers -> multipleNumbers num_expression','multipleNumbers',2,'p_multipleNumbers','sintactico_clojure.py',197),
  ('multipleNumbers -> num_expression','multipleNumbers',1,'p_multipleNumbers','sintactico_clojure.py',198),
  ('boolean_operation -> bool_operation','boolean_operation',1,'p_boolean_operation','sintactico_clojure.py',203),
  ('boolean_operation -> compare_operation','boolean_operation',1,'p_boolean_operation','sintactico_clojure.py',204),
  ('bool_expression -> LPAREN bool_operation RPAREN','bool_expression',3,'p_boolean_expression','sintactico_clojure.py',208),
  ('bool_operation -> AND bool_expression bool_expression','bool_operation',3,'p_bool_operation_and','sintactico_clojure.py',212),
  ('bool_operation -> OR bool_expression bool_expression','bool_operation',3,'p_bool_operation_or','sintactico_clojure.py',216),
  ('bool_operation -> NOT bool_expression','bool_operation',2,'p_bool_operation_not','sintactico_clojure.py',220),
  ('bool_expression -> BOOLEAN_TRUE','bool_expression',1,'p_bool_type','sintactico_clojure.py',224),
  ('bool_expression -> BOOLEAN_FALSE','bool_expression',1,'p_bool_type','sintactico_clojure.py',225),
  ('bool_expression -> ID','bool_expression',1,'p_bool_type','sintactico_clojure.py',226),
  ('compare_operation -> GREATERTHAN num_expression num_expression','compare_operation',3,'p_compare_operation_greaterthan','sintactico_clojure.py',231),
  ('compare_operation -> GREATERTHAN num_expression NULL','compare_operation',3,'p_compare_operation_greaterthan','sintactico_clojure.py',232),
  ('compare_operation -> GREATERTHAN NULL num_expression','compare_operation',3,'p_compare_operation_greaterthan','sintactico_clojure.py',233),
  ('compare_operation -> LESSTHAN num_expression num_expression','compare_operation',3,'p_compare_operation_lessthan','sintactico_clojure.py',237),
  ('compare_operation -> LESSTHAN num_expression NULL','compare_operation',3,'p_compare_operation_lessthan','sintactico_clojure.py',238),
  ('compare_operation -> LESSTHAN NULL num_expression','compare_operation',3,'p_compare_operation_lessthan','sintactico_clojure.py',239),
  ('compare_operation -> GREATERTHANEQUALS num_expression num_expression','compare_operation',3,'p_compare_operation_greaterthan_equals','sintactico_clojure.py',243),
  ('compare_operation -> GREATERTHANEQUALS num_expression NULL','compare_operation',3,'p_compare_operation_greaterthan_equals','sintactico_clojure.py',244),
  ('compare_operation -> GREATERTHANEQUALS NULL num_expression','compare_operation',3,'p_compare_operation_greaterthan_equals','sintactico_clojure.py',245),
  ('compare_operation -> LESSTHANEQUALS num_expression num_expression','compare_operation',3,'p_compare_operation_lessthan_equals','sintactico_clojure.py',249),
  ('compare_operation -> LESSTHANEQUALS num_expression NULL','compare_operation',3,'p_compare_operation_lessthan_equals','sintactico_clojure.py',250),
  ('compare_operation -> LESSTHANEQUALS NULL num_expression','compare_operation',3,'p_compare_operation_lessthan_equals','sintactico_clojure.py',251),
  ('compare_operation -> EQUAL num_expression num_expression','compare_operation',3,'p_compare_operation_equal','sintactico_clojure.py',255),
  ('compare_operation -> EQUAL num_expression NULL','compare_operation',3,'p_compare_operation_equal','sintactico_clojure.py',256),
  ('compare_operation -> EQUAL NULL num_expression','compare_operation',3,'p_compare_operation_equal','sintactico_clojure.py',257),
  ('compare_operation -> NOTEQUAL num_expression num_expression','compare_operation',3,'p_compare_operation_notequal','sintactico_clojure.py',261),
  ('compare_operation -> NOTEQUAL num_expression NULL','compare_operation',3,'p_compare_operation_notequal','sintactico_clojure.py',262),
  ('compare_operation -> NOTEQUAL NULL num_expression','compare_operation',3,'p_compare_operation_notequal','sintactico_clojure.py',263),
  ('variable_expression -> DEF ID value','variable_expression',3,'p_variable_expression_statemt','sintactico_clojure.py',268),
  ('variable_expression -> DEF ID sequential_colls','variable_expression',3,'p_variable_expression_statemt','sintactico_clojure.py',269),
  ('variable_expression -> DEF ID stament','variable_expression',3,'p_variable_expression_statemt','sintactico_clojure.py',270),
  ('variable_expression -> DEF NULL','variable_expression',2,'p_variable_expression_statemt','sintactico_clojure.py',271),
  ('control_structure -> if','control_structure',1,'p_control_structure','sintactico_clojure.py',277),
  ('control_structure -> for','control_structure',1,'p_control_structure','sintactico_clojure.py',278),
  ('for -> FOR LBRACKET ID sequential_colls RBRACKET','for',5,'p_for','sintactico_clojure.py',282),
  ('for -> FOR LBRACKET ID ID RBRACKET','for',5,'p_for','sintactico_clojure.py',283),
  ('while -> WHILE LPAREN boolean_operation RPAREN do','while',5,'p_while','sintactico_clojure.py',287),
  ('do -> LPAREN DO code_block RPAREN','do',4,'p_do_statement','sintactico_clojure.py',291),
  ('if -> IF LPAREN boolean_operation RPAREN','if',4,'p_if','sintactico_clojure.py',295),
]

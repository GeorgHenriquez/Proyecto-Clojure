
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER PLUS MINUS TIMES DIVIDE LPAREN RPAREN LCURLYBRA RCURLYBRA SETDEF ID FLOAT EQUAL NOTEQUAL STRING GREATERTHAN LESSTHAN GREATERTHANEQUALS LESSTHANEQUALS APOSTROPHE LBRACKET RBRACKET QUESTION DOUBLE_POINT POINT PERCENTAJE AT EXCLAMATION DEF DEFN NULL BOOLEAN_TRUE BOOLEAN_FALSE AND OR NOT IF ELSE FUNCTION_PRINTLN SET UNION DIFFERENCE INTERSECTION WHILE DO FOR READLINE FUNCTION_EMPTY TYPE_STR FUNCTION_SUB FUNCTION_SEQ FUNCTION_GET FUNCTION_COUNT FUNCTION_CONJ VECTOR LIST FUNCTION_NTH TAKE DROPstament : LPAREN compute RPAREN\n                | vectorcompute : function\n                | general_expressionfunction : FUNCTION_PRINTLN multipleObjectsfunction : READLINEfunction : FUNCTION_EMPTY  STRINGmultiplestring : STRING\n                        | STRING multiplestring\n                        | stament\n                        | stament multiplestringfunction : TYPE_STR multiplestringfunction : FUNCTION_SUB STRING NUMBER\n                 | FUNCTION_SUB ID NUMBERfunction : FUNCTION_SEQ STRING\n                 | FUNCTION_SEQ IDmultipleObjects : value\n                        | value multipleObjects\n                        | sequential_colls\n                        | sequential_colls multipleObjectsvalue : STRING\n              | NUMBER\n              | FLOAT\n              | BOOLEAN_TRUE\n              | BOOLEAN_FALSEvector : LBRACKET multipleObjects RBRACKETfunction : FUNCTION_GET sequential_colls NUMBERfunction : FUNCTION_COUNT sequential_collsfunction : FUNCTION_CONJ sequential_colls multipleObjectslist : APOSTROPHE LPAREN multipleObjects RPAREN\n        | LPAREN LIST multipleObjects RPARENsequential_colls : vector\n                        | set\n                        | list\n                        | IDset : SETDEF LCURLYBRA multipleObjects RCURLYBRA\n        | LPAREN SET multipleObjects RPARENsetFunctions_union : SET DIVIDE UNION set setsetFunctions_difference : SET DIVIDE DIFFERENCE set setsetFunctions_intersection : SET DIVIDE INTERSECTION set setfunction_take : LPAREN TAKE NUMBER sequential_collsfunction_drop : LPAREN DROP NUMBER sequential_collsgeneral_expression : math_operation\n                          | bool_operation\n                          | compare_operation\n                          | variable_expressionnum_expression : LPAREN math_operation RPARENmath_operation : PLUS num_expression NUMBERmath_operation : MINUS num_expression NUMBERmath_operation : DIVIDE num_expression NUMBERmath_operation : TIMES num_expression NUMBERnum_expression : NUMBER bool_expression : LPAREN bool_operation RPARENbool_operation : AND bool_expression bool_expressionbool_operation : OR bool_expression bool_expressionbool_operation : NOT bool_expressionbool_expression : BOOLEAN_TRUE\n     | BOOLEAN_FALSEcompare_operation : GREATERTHAN num_expression num_expressioncompare_operation : LESSTHAN num_expression num_expressioncompare_operation : GREATERTHANEQUALS num_expression num_expressioncompare_operation : LESSTHANEQUALS num_expression num_expressioncompare_operation : EQUAL num_expression num_expressioncompare_operation : NOTEQUAL num_expression num_expressionvariable_expression : DEF ID STRINGvariable_expression : DEF ID NUMBER\n                                   | FLOATvariable_expression : DEF ID BOOLEAN_TRUE\n                                   | BOOLEAN_FALSEvariable_expression : DEF ID stament'
    
_lr_action_items = {'LPAREN':([0,3,4,8,11,14,15,16,21,22,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,42,43,44,45,46,47,48,51,52,56,57,64,66,71,73,74,75,77,78,79,80,81,82,83,84,87,88,89,90,119,120,121,122,123,124,],[2,-2,50,50,2,50,50,50,67,67,67,67,72,72,72,67,67,67,67,67,67,50,50,-21,-22,-23,-24,-25,-32,-33,-34,-35,90,-1,2,2,50,-52,72,-57,-58,72,67,67,67,67,67,67,2,-26,50,50,50,50,-47,-53,-36,-37,-31,-30,]),'LBRACKET':([0,3,4,8,11,14,15,16,38,39,40,41,42,43,44,45,46,47,48,52,56,57,64,83,84,87,88,89,90,121,122,123,124,],[4,-2,4,4,4,4,4,4,4,4,-21,-22,-23,-24,-25,-32,-33,-34,-35,-1,4,4,4,4,-26,4,4,4,4,-36,-37,-31,-30,]),'$end':([1,3,52,84,],[0,-2,-1,-26,]),'FUNCTION_PRINTLN':([2,],[8,]),'READLINE':([2,],[9,]),'FUNCTION_EMPTY':([2,],[10,]),'TYPE_STR':([2,],[11,]),'FUNCTION_SUB':([2,],[12,]),'FUNCTION_SEQ':([2,],[13,]),'FUNCTION_GET':([2,],[14,]),'FUNCTION_COUNT':([2,],[15,]),'FUNCTION_CONJ':([2,],[16,]),'PLUS':([2,67,],[21,21,]),'MINUS':([2,67,],[22,22,]),'DIVIDE':([2,67,],[23,23,]),'TIMES':([2,67,],[24,24,]),'AND':([2,72,],[25,25,]),'OR':([2,72,],[26,26,]),'NOT':([2,72,],[27,27,]),'GREATERTHAN':([2,],[28,]),'LESSTHAN':([2,],[29,]),'GREATERTHANEQUALS':([2,],[30,]),'LESSTHANEQUALS':([2,],[31,]),'EQUAL':([2,],[32,]),'NOTEQUAL':([2,],[33,]),'DEF':([2,],[34,]),'FLOAT':([2,4,8,38,39,40,41,42,43,44,45,46,47,48,64,84,87,88,89,90,121,122,123,124,],[35,42,42,42,42,-21,-22,-23,-24,-25,-32,-33,-34,-35,42,-26,42,42,42,42,-36,-37,-31,-30,]),'BOOLEAN_FALSE':([2,4,8,25,26,27,38,39,40,41,42,43,44,45,46,47,48,64,71,73,74,75,84,87,88,89,90,120,121,122,123,124,],[36,44,44,74,74,74,44,44,-21,-22,-23,-24,-25,-32,-33,-34,-35,44,74,-57,-58,74,-26,44,44,44,44,-53,-36,-37,-31,-30,]),'STRING':([3,4,8,10,11,12,13,38,39,40,41,42,43,44,45,46,47,48,52,56,57,64,83,84,87,88,89,90,121,122,123,124,],[-2,40,40,54,56,58,60,40,40,-21,-22,-23,-24,-25,-32,-33,-34,-35,-1,56,56,40,111,-26,40,40,40,40,-36,-37,-31,-30,]),'RPAREN':([3,5,6,7,9,17,18,19,20,35,36,38,39,40,41,42,43,44,45,46,47,48,52,53,54,55,56,57,60,61,63,66,73,74,76,84,85,86,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121,122,123,124,],[-2,52,-3,-4,-6,-43,-44,-45,-46,-67,-69,-17,-19,-21,-22,-23,-24,-25,-32,-33,-34,-35,-1,-5,-7,-12,-8,-10,-15,-16,-28,-52,-57,-58,-56,-26,-18,-20,-9,-11,-13,-14,-27,-29,-48,119,-49,-50,-51,-54,120,-55,-59,-60,-61,-62,-63,-64,-65,-66,-68,-70,122,123,124,-47,-53,-36,-37,-31,-30,]),'NUMBER':([4,8,21,22,23,24,28,29,30,31,32,33,38,39,40,41,42,43,44,45,46,47,48,58,59,62,64,65,66,68,69,70,77,78,79,80,81,82,83,84,87,88,89,90,119,121,122,123,124,],[41,41,66,66,66,66,66,66,66,66,66,66,41,41,-21,-22,-23,-24,-25,-32,-33,-34,-35,93,94,95,41,97,-52,99,100,101,66,66,66,66,66,66,112,-26,41,41,41,41,-47,-36,-37,-31,-30,]),'BOOLEAN_TRUE':([4,8,25,26,27,38,39,40,41,42,43,44,45,46,47,48,64,71,73,74,75,83,84,87,88,89,90,120,121,122,123,124,],[43,43,73,73,73,43,43,-21,-22,-23,-24,-25,-32,-33,-34,-35,43,73,-57,-58,73,113,-26,43,43,43,43,-53,-36,-37,-31,-30,]),'ID':([4,8,12,13,14,15,16,34,38,39,40,41,42,43,44,45,46,47,48,64,84,87,88,89,90,121,122,123,124,],[48,48,59,61,48,48,48,83,48,48,-21,-22,-23,-24,-25,-32,-33,-34,-35,48,-26,48,48,48,48,-36,-37,-31,-30,]),'SETDEF':([4,8,14,15,16,38,39,40,41,42,43,44,45,46,47,48,64,84,87,88,89,90,121,122,123,124,],[49,49,49,49,49,49,49,-21,-22,-23,-24,-25,-32,-33,-34,-35,49,-26,49,49,49,49,-36,-37,-31,-30,]),'APOSTROPHE':([4,8,14,15,16,38,39,40,41,42,43,44,45,46,47,48,64,84,87,88,89,90,121,122,123,124,],[51,51,51,51,51,51,51,-21,-22,-23,-24,-25,-32,-33,-34,-35,51,-26,51,51,51,51,-36,-37,-31,-30,]),'RBRACKET':([37,38,39,40,41,42,43,44,45,46,47,48,84,85,86,121,122,123,124,],[84,-17,-19,-21,-22,-23,-24,-25,-32,-33,-34,-35,-26,-18,-20,-36,-37,-31,-30,]),'RCURLYBRA':([38,39,40,41,42,43,44,45,46,47,48,84,85,86,115,121,122,123,124,],[-17,-19,-21,-22,-23,-24,-25,-32,-33,-34,-35,-26,-18,-20,121,-36,-37,-31,-30,]),'LCURLYBRA':([49,],[87,]),'SET':([50,],[88,]),'LIST':([50,],[89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stament':([0,11,56,57,83,],[1,57,57,57,114,]),'vector':([0,4,8,11,14,15,16,38,39,56,57,64,83,87,88,89,90,],[3,45,45,3,45,45,45,45,45,3,3,45,3,45,45,45,45,]),'compute':([2,],[5,]),'function':([2,],[6,]),'general_expression':([2,],[7,]),'math_operation':([2,67,],[17,98,]),'bool_operation':([2,72,],[18,103,]),'compare_operation':([2,],[19,]),'variable_expression':([2,],[20,]),'multipleObjects':([4,8,38,39,64,87,88,89,90,],[37,53,85,86,96,115,116,117,118,]),'value':([4,8,38,39,64,87,88,89,90,],[38,38,38,38,38,38,38,38,38,]),'sequential_colls':([4,8,14,15,16,38,39,64,87,88,89,90,],[39,39,62,63,64,39,39,39,39,39,39,39,]),'set':([4,8,14,15,16,38,39,64,87,88,89,90,],[46,46,46,46,46,46,46,46,46,46,46,46,]),'list':([4,8,14,15,16,38,39,64,87,88,89,90,],[47,47,47,47,47,47,47,47,47,47,47,47,]),'multiplestring':([11,56,57,],[55,91,92,]),'num_expression':([21,22,23,24,28,29,30,31,32,33,77,78,79,80,81,82,],[65,68,69,70,77,78,79,80,81,82,105,106,107,108,109,110,]),'bool_expression':([25,26,27,71,75,],[71,75,76,102,104,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stament","S'",1,None,None,None),
  ('stament -> LPAREN compute RPAREN','stament',3,'p_stament','sintactico_clojure.py',6),
  ('stament -> vector','stament',1,'p_stament','sintactico_clojure.py',7),
  ('compute -> function','compute',1,'p_compute','sintactico_clojure.py',12),
  ('compute -> general_expression','compute',1,'p_compute','sintactico_clojure.py',13),
  ('function -> FUNCTION_PRINTLN multipleObjects','function',2,'p_function_println','sintactico_clojure.py',18),
  ('function -> READLINE','function',1,'p_function_readLine','sintactico_clojure.py',22),
  ('function -> FUNCTION_EMPTY STRING','function',2,'p_function_empty','sintactico_clojure.py',25),
  ('multiplestring -> STRING','multiplestring',1,'p_multiplestring','sintactico_clojure.py',28),
  ('multiplestring -> STRING multiplestring','multiplestring',2,'p_multiplestring','sintactico_clojure.py',29),
  ('multiplestring -> stament','multiplestring',1,'p_multiplestring','sintactico_clojure.py',30),
  ('multiplestring -> stament multiplestring','multiplestring',2,'p_multiplestring','sintactico_clojure.py',31),
  ('function -> TYPE_STR multiplestring','function',2,'p_function_str','sintactico_clojure.py',34),
  ('function -> FUNCTION_SUB STRING NUMBER','function',3,'p_function_subString','sintactico_clojure.py',37),
  ('function -> FUNCTION_SUB ID NUMBER','function',3,'p_function_subString','sintactico_clojure.py',38),
  ('function -> FUNCTION_SEQ STRING','function',2,'p_function_sequence','sintactico_clojure.py',41),
  ('function -> FUNCTION_SEQ ID','function',2,'p_function_sequence','sintactico_clojure.py',42),
  ('multipleObjects -> value','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',46),
  ('multipleObjects -> value multipleObjects','multipleObjects',2,'p_multipleObjects','sintactico_clojure.py',47),
  ('multipleObjects -> sequential_colls','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',48),
  ('multipleObjects -> sequential_colls multipleObjects','multipleObjects',2,'p_multipleObjects','sintactico_clojure.py',49),
  ('value -> STRING','value',1,'p_value','sintactico_clojure.py',52),
  ('value -> NUMBER','value',1,'p_value','sintactico_clojure.py',53),
  ('value -> FLOAT','value',1,'p_value','sintactico_clojure.py',54),
  ('value -> BOOLEAN_TRUE','value',1,'p_value','sintactico_clojure.py',55),
  ('value -> BOOLEAN_FALSE','value',1,'p_value','sintactico_clojure.py',56),
  ('vector -> LBRACKET multipleObjects RBRACKET','vector',3,'p_vector','sintactico_clojure.py',59),
  ('function -> FUNCTION_GET sequential_colls NUMBER','function',3,'p_function_get','sintactico_clojure.py',63),
  ('function -> FUNCTION_COUNT sequential_colls','function',2,'p_function_count','sintactico_clojure.py',66),
  ('function -> FUNCTION_CONJ sequential_colls multipleObjects','function',3,'p_function_conj','sintactico_clojure.py',69),
  ('list -> APOSTROPHE LPAREN multipleObjects RPAREN','list',4,'p_list','sintactico_clojure.py',78),
  ('list -> LPAREN LIST multipleObjects RPAREN','list',4,'p_list','sintactico_clojure.py',79),
  ('sequential_colls -> vector','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',82),
  ('sequential_colls -> set','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',83),
  ('sequential_colls -> list','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',84),
  ('sequential_colls -> ID','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',85),
  ('set -> SETDEF LCURLYBRA multipleObjects RCURLYBRA','set',4,'p_set','sintactico_clojure.py',89),
  ('set -> LPAREN SET multipleObjects RPAREN','set',4,'p_set','sintactico_clojure.py',90),
  ('setFunctions_union -> SET DIVIDE UNION set set','setFunctions_union',5,'p_setFunctions_union','sintactico_clojure.py',93),
  ('setFunctions_difference -> SET DIVIDE DIFFERENCE set set','setFunctions_difference',5,'p_setFunctions_difference','sintactico_clojure.py',96),
  ('setFunctions_intersection -> SET DIVIDE INTERSECTION set set','setFunctions_intersection',5,'p_setFunctions_intersection','sintactico_clojure.py',99),
  ('function_take -> LPAREN TAKE NUMBER sequential_colls','function_take',4,'p_function_take','sintactico_clojure.py',102),
  ('function_drop -> LPAREN DROP NUMBER sequential_colls','function_drop',4,'p_function_drop','sintactico_clojure.py',105),
  ('general_expression -> math_operation','general_expression',1,'p_general_expression','sintactico_clojure.py',113),
  ('general_expression -> bool_operation','general_expression',1,'p_general_expression','sintactico_clojure.py',114),
  ('general_expression -> compare_operation','general_expression',1,'p_general_expression','sintactico_clojure.py',115),
  ('general_expression -> variable_expression','general_expression',1,'p_general_expression','sintactico_clojure.py',116),
  ('num_expression -> LPAREN math_operation RPAREN','num_expression',3,'p_num_expression','sintactico_clojure.py',120),
  ('math_operation -> PLUS num_expression NUMBER','math_operation',3,'p_operation_plus','sintactico_clojure.py',124),
  ('math_operation -> MINUS num_expression NUMBER','math_operation',3,'p_operation_minus','sintactico_clojure.py',128),
  ('math_operation -> DIVIDE num_expression NUMBER','math_operation',3,'p_operation_divide','sintactico_clojure.py',132),
  ('math_operation -> TIMES num_expression NUMBER','math_operation',3,'p_operation_times','sintactico_clojure.py',136),
  ('num_expression -> NUMBER','num_expression',1,'p_number','sintactico_clojure.py',140),
  ('bool_expression -> LPAREN bool_operation RPAREN','bool_expression',3,'p_boolean_expression','sintactico_clojure.py',145),
  ('bool_operation -> AND bool_expression bool_expression','bool_operation',3,'p_bool_operation_and','sintactico_clojure.py',149),
  ('bool_operation -> OR bool_expression bool_expression','bool_operation',3,'p_bool_operation_or','sintactico_clojure.py',153),
  ('bool_operation -> NOT bool_expression','bool_operation',2,'p_bool_operation_not','sintactico_clojure.py',157),
  ('bool_expression -> BOOLEAN_TRUE','bool_expression',1,'p_bool_type','sintactico_clojure.py',161),
  ('bool_expression -> BOOLEAN_FALSE','bool_expression',1,'p_bool_type','sintactico_clojure.py',162),
  ('compare_operation -> GREATERTHAN num_expression num_expression','compare_operation',3,'p_compare_operation_greaterthan','sintactico_clojure.py',167),
  ('compare_operation -> LESSTHAN num_expression num_expression','compare_operation',3,'p_compare_operation_lessthan','sintactico_clojure.py',171),
  ('compare_operation -> GREATERTHANEQUALS num_expression num_expression','compare_operation',3,'p_compare_operation_greaterthan_equals','sintactico_clojure.py',175),
  ('compare_operation -> LESSTHANEQUALS num_expression num_expression','compare_operation',3,'p_compare_operation_lessthan_equals','sintactico_clojure.py',179),
  ('compare_operation -> EQUAL num_expression num_expression','compare_operation',3,'p_compare_operation_equal','sintactico_clojure.py',183),
  ('compare_operation -> NOTEQUAL num_expression num_expression','compare_operation',3,'p_compare_operation_notequal','sintactico_clojure.py',187),
  ('variable_expression -> DEF ID STRING','variable_expression',3,'p_variable_expression_string','sintactico_clojure.py',192),
  ('variable_expression -> DEF ID NUMBER','variable_expression',3,'p_variable_expression_number','sintactico_clojure.py',196),
  ('variable_expression -> FLOAT','variable_expression',1,'p_variable_expression_number','sintactico_clojure.py',197),
  ('variable_expression -> DEF ID BOOLEAN_TRUE','variable_expression',3,'p_variable_expression_boolean','sintactico_clojure.py',201),
  ('variable_expression -> BOOLEAN_FALSE','variable_expression',1,'p_variable_expression_boolean','sintactico_clojure.py',202),
  ('variable_expression -> DEF ID stament','variable_expression',3,'p_variable_expression_statemt','sintactico_clojure.py',206),
]

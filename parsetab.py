
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APOSTROPHE AT BOOLEAN_FALSE BOOLEAN_TRUE DEF DEFN DIFFERENCE DIVIDE DO DOUBLE_POINT DROP ELSE EQUAL EXCLAMATION FLOAT FOR FUNCTION_CONJ FUNCTION_COUNT FUNCTION_EMPTY FUNCTION_GET FUNCTION_NTH FUNCTION_PRINTLN FUNCTION_SEQ FUNCTION_SUB GREATERTHAN GREATERTHANEQUALS ID IF INTERSECTION LBRACKET LCURLYBRA LESSTHAN LESSTHANEQUALS LINE LIST LPAREN MINUS NOT NOTEQUAL NULL NUMBER OR PERCENTAJE PLUS POINT QUESTION RBRACKET RCURLYBRA READ RPAREN SET SETDEF STRING TAKE TIMES TYPE_STR UNION VECTOR WHILEstament : LPAREN compute RPAREN\n                | vectorcompute : function\n                | general_expressionfunction : FUNCTION_PRINTLN STRINGfunction : READ MINUS LINEfunction : FUNCTION_EMPTY QUESTION STRINGmultiplestring : STRING\n                        | multiplestring STRINGfunction : TYPE_STR multiplestringfunction : FUNCTION_SUB STRING NUMBERfunction : FUNCTION_SEQ STRINGmultipleObjects : STRING\n                        | NUMBER\n                        | FLOAT\n                        | BOOLEAN_TRUE\n                        | BOOLEAN_FALSE\n                        | multipleObjects STRING\n                        | multipleObjects NUMBER\n                        | multipleObjects FLOAT\n                        | multipleObjects BOOLEAN_TRUE\n                        | multipleObjects BOOLEAN_FALSEvector : LBRACKET multipleObjects RBRACKETfunction : FUNCTION_GET sequential_colls NUMBERfunction : FUNCTION_COUNT sequential_collsfunction : FUNCTION_CONJ sequential_colls multipleObjectslist : APOSTROPHE LPAREN multipleObjects RPAREN\n        | LPAREN LIST multipleObjects RPARENsequential_colls : vector \n    | set \n    | list \n    | IDset : SETDEF LCURLYBRA multipleObjects RCURLYBRA\n        | LPAREN SET multipleObjects RPARENsetFunctions_union : SET DIVIDE UNION set setsetFunctions_difference : SET DIVIDE DIFFERENCE set setsetFunctions_intersection : SET DIVIDE INTERSECTION set setfunction_take : LPAREN TAKE NUMBER sequential_collsfunction_drop : LPAREN DROP NUMBER sequential_collsgeneral_expression : math_operation\n                          | bool_operation\n                          | compare_operation\n                          | variable_expressionnum_expression : LPAREN math_operation RPARENmath_operation : PLUS num_expression NUMBERmath_operation : MINUS num_expression NUMBERmath_operation : DIVIDE num_expression NUMBERmath_operation : TIMES num_expression NUMBERnum_expression : NUMBER bool_expression : LPAREN bool_operation RPARENbool_operation : AND bool_expression bool_expressionbool_operation : OR bool_expression bool_expressionbool_operation : NOT bool_expressionbool_expression : BOOLEAN_TRUE\n     | BOOLEAN_FALSEcompare_operation : GREATERTHAN num_expression num_expressioncompare_operation : LESSTHAN num_expression num_expressioncompare_operation : GREATERTHANEQUALS num_expression num_expressioncompare_operation : LESSTHANEQUALS num_expression num_expressioncompare_operation : EQUAL num_expression num_expressioncompare_operation : NOTEQUAL num_expression num_expressionvariable_expression : DEF ID STRINGvariable_expression : DEF ID NUMBER\n                                   | FLOATvariable_expression : DEF ID BOOLEAN_TRUE\n                                   | BOOLEAN_FALSE'
    
_lr_action_items = {'LPAREN':([0,10,15,16,17,22,23,24,25,26,27,28,29,30,31,32,33,47,61,67,69,70,71,73,74,75,76,77,78,113,118,],[2,48,60,60,60,48,48,48,68,68,68,48,48,48,48,48,48,-49,96,68,-54,-55,68,48,48,48,48,48,48,-44,-50,]),'LBRACKET':([0,15,16,17,],[4,4,4,4,]),'$end':([1,3,43,80,],[0,-2,-1,-23,]),'FUNCTION_PRINTLN':([2,],[8,]),'READ':([2,],[9,]),'FUNCTION_EMPTY':([2,],[11,]),'TYPE_STR':([2,],[12,]),'FUNCTION_SUB':([2,],[13,]),'FUNCTION_SEQ':([2,],[14,]),'FUNCTION_GET':([2,],[15,]),'FUNCTION_COUNT':([2,],[16,]),'FUNCTION_CONJ':([2,],[17,]),'PLUS':([2,48,],[22,22,]),'MINUS':([2,9,48,],[10,45,10,]),'DIVIDE':([2,48,],[23,23,]),'TIMES':([2,48,],[24,24,]),'AND':([2,68,],[25,25,]),'OR':([2,68,],[26,26,]),'NOT':([2,68,],[27,27,]),'GREATERTHAN':([2,],[28,]),'LESSTHAN':([2,],[29,]),'GREATERTHANEQUALS':([2,],[30,]),'LESSTHANEQUALS':([2,],[31,]),'EQUAL':([2,],[32,]),'NOTEQUAL':([2,],[33,]),'DEF':([2,],[34,]),'FLOAT':([2,4,37,38,39,40,41,42,55,56,57,58,63,80,81,82,83,84,85,93,94,95,96,97,114,115,116,117,119,120,121,122,],[35,40,83,-13,-14,-15,-16,-17,-29,-30,-31,-32,40,-23,-18,-19,-20,-21,-22,40,40,40,40,83,83,83,83,83,-33,-34,-28,-27,]),'BOOLEAN_FALSE':([2,4,25,26,27,37,38,39,40,41,42,55,56,57,58,63,67,69,70,71,80,81,82,83,84,85,93,94,95,96,97,114,115,116,117,118,119,120,121,122,],[36,42,70,70,70,85,-13,-14,-15,-16,-17,-29,-30,-31,-32,42,70,-54,-55,70,-23,-18,-19,-20,-21,-22,42,42,42,42,85,85,85,85,85,-50,-33,-34,-28,-27,]),'STRING':([4,8,12,13,14,37,38,39,40,41,42,49,50,51,55,56,57,58,63,79,80,81,82,83,84,85,90,93,94,95,96,97,114,115,116,117,119,120,121,122,],[38,44,51,52,53,81,-13,-14,-15,-16,-17,89,90,-8,-29,-30,-31,-32,38,110,-23,-18,-19,-20,-21,-22,-9,38,38,38,38,81,81,81,81,81,-33,-34,-28,-27,]),'NUMBER':([4,10,22,23,24,28,29,30,31,32,33,37,38,39,40,41,42,46,47,52,54,55,56,57,58,63,64,65,66,73,74,75,76,77,78,79,80,81,82,83,84,85,93,94,95,96,97,113,114,115,116,117,119,120,121,122,],[39,47,47,47,47,47,47,47,47,47,47,82,-13,-14,-15,-16,-17,87,-49,91,92,-29,-30,-31,-32,39,98,99,100,47,47,47,47,47,47,111,-23,-18,-19,-20,-21,-22,39,39,39,39,82,-44,82,82,82,82,-33,-34,-28,-27,]),'BOOLEAN_TRUE':([4,25,26,27,37,38,39,40,41,42,55,56,57,58,63,67,69,70,71,79,80,81,82,83,84,85,93,94,95,96,97,114,115,116,117,118,119,120,121,122,],[41,69,69,69,84,-13,-14,-15,-16,-17,-29,-30,-31,-32,41,69,-54,-55,69,112,-23,-18,-19,-20,-21,-22,41,41,41,41,84,84,84,84,84,-50,-33,-34,-28,-27,]),'RPAREN':([5,6,7,18,19,20,21,35,36,38,39,40,41,42,44,47,50,51,53,55,56,57,58,62,69,70,72,80,81,82,83,84,85,86,87,88,89,90,91,92,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120,121,122,],[43,-3,-4,-40,-41,-42,-43,-64,-66,-13,-14,-15,-16,-17,-5,-49,-10,-8,-12,-29,-30,-31,-32,-25,-54,-55,-53,-23,-18,-19,-20,-21,-22,-6,-46,113,-7,-9,-11,-24,-26,-45,-47,-48,-51,118,-52,-56,-57,-58,-59,-60,-61,-62,-63,-65,-44,120,121,122,-50,-33,-34,-28,-27,]),'QUESTION':([11,],[49,]),'ID':([15,16,17,34,],[58,58,58,79,]),'SETDEF':([15,16,17,],[59,59,59,]),'APOSTROPHE':([15,16,17,],[61,61,61,]),'RBRACKET':([37,38,39,40,41,42,81,82,83,84,85,],[80,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,]),'RCURLYBRA':([38,39,40,41,42,81,82,83,84,85,114,],[-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,119,]),'LINE':([45,],[86,]),'LCURLYBRA':([59,],[93,]),'SET':([60,],[94,]),'LIST':([60,],[95,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stament':([0,],[1,]),'vector':([0,15,16,17,],[3,55,55,55,]),'compute':([2,],[5,]),'function':([2,],[6,]),'general_expression':([2,],[7,]),'math_operation':([2,48,],[18,88,]),'bool_operation':([2,68,],[19,102,]),'compare_operation':([2,],[20,]),'variable_expression':([2,],[21,]),'multipleObjects':([4,63,93,94,95,96,],[37,97,114,115,116,117,]),'num_expression':([10,22,23,24,28,29,30,31,32,33,73,74,75,76,77,78,],[46,64,65,66,73,74,75,76,77,78,104,105,106,107,108,109,]),'multiplestring':([12,],[50,]),'sequential_colls':([15,16,17,],[54,62,63,]),'set':([15,16,17,],[56,56,56,]),'list':([15,16,17,],[57,57,57,]),'bool_expression':([25,26,27,67,71,],[67,71,72,101,103,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stament","S'",1,None,None,None),
  ('stament -> LPAREN compute RPAREN','stament',3,'p_stament','sintactico_clojure.py',6),
  ('stament -> vector','stament',1,'p_stament','sintactico_clojure.py',7),
  ('compute -> function','compute',1,'p_compute','sintactico_clojure.py',12),
  ('compute -> general_expression','compute',1,'p_compute','sintactico_clojure.py',13),
  ('function -> FUNCTION_PRINTLN STRING','function',2,'p_function_println','sintactico_clojure.py',18),
  ('function -> READ MINUS LINE','function',3,'p_function_readLine','sintactico_clojure.py',22),
  ('function -> FUNCTION_EMPTY QUESTION STRING','function',3,'p_function_empty','sintactico_clojure.py',25),
  ('multiplestring -> STRING','multiplestring',1,'p_multiplestring','sintactico_clojure.py',28),
  ('multiplestring -> multiplestring STRING','multiplestring',2,'p_multiplestring','sintactico_clojure.py',29),
  ('function -> TYPE_STR multiplestring','function',2,'p_function_concant','sintactico_clojure.py',32),
  ('function -> FUNCTION_SUB STRING NUMBER','function',3,'p_function_subString','sintactico_clojure.py',35),
  ('function -> FUNCTION_SEQ STRING','function',2,'p_function_sequence','sintactico_clojure.py',38),
  ('multipleObjects -> STRING','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',42),
  ('multipleObjects -> NUMBER','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',43),
  ('multipleObjects -> FLOAT','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',44),
  ('multipleObjects -> BOOLEAN_TRUE','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',45),
  ('multipleObjects -> BOOLEAN_FALSE','multipleObjects',1,'p_multipleObjects','sintactico_clojure.py',46),
  ('multipleObjects -> multipleObjects STRING','multipleObjects',2,'p_multipleObjects','sintactico_clojure.py',47),
  ('multipleObjects -> multipleObjects NUMBER','multipleObjects',2,'p_multipleObjects','sintactico_clojure.py',48),
  ('multipleObjects -> multipleObjects FLOAT','multipleObjects',2,'p_multipleObjects','sintactico_clojure.py',49),
  ('multipleObjects -> multipleObjects BOOLEAN_TRUE','multipleObjects',2,'p_multipleObjects','sintactico_clojure.py',50),
  ('multipleObjects -> multipleObjects BOOLEAN_FALSE','multipleObjects',2,'p_multipleObjects','sintactico_clojure.py',51),
  ('vector -> LBRACKET multipleObjects RBRACKET','vector',3,'p_vector','sintactico_clojure.py',54),
  ('function -> FUNCTION_GET sequential_colls NUMBER','function',3,'p_function_get','sintactico_clojure.py',58),
  ('function -> FUNCTION_COUNT sequential_colls','function',2,'p_function_count','sintactico_clojure.py',61),
  ('function -> FUNCTION_CONJ sequential_colls multipleObjects','function',3,'p_function_conj','sintactico_clojure.py',64),
  ('list -> APOSTROPHE LPAREN multipleObjects RPAREN','list',4,'p_list','sintactico_clojure.py',72),
  ('list -> LPAREN LIST multipleObjects RPAREN','list',4,'p_list','sintactico_clojure.py',73),
  ('sequential_colls -> vector','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',76),
  ('sequential_colls -> set','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',77),
  ('sequential_colls -> list','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',78),
  ('sequential_colls -> ID','sequential_colls',1,'p_sequential_colls','sintactico_clojure.py',79),
  ('set -> SETDEF LCURLYBRA multipleObjects RCURLYBRA','set',4,'p_set','sintactico_clojure.py',82),
  ('set -> LPAREN SET multipleObjects RPAREN','set',4,'p_set','sintactico_clojure.py',83),
  ('setFunctions_union -> SET DIVIDE UNION set set','setFunctions_union',5,'p_setFunctions_union','sintactico_clojure.py',86),
  ('setFunctions_difference -> SET DIVIDE DIFFERENCE set set','setFunctions_difference',5,'p_setFunctions_difference','sintactico_clojure.py',89),
  ('setFunctions_intersection -> SET DIVIDE INTERSECTION set set','setFunctions_intersection',5,'p_setFunctions_intersection','sintactico_clojure.py',92),
  ('function_take -> LPAREN TAKE NUMBER sequential_colls','function_take',4,'p_function_take','sintactico_clojure.py',95),
  ('function_drop -> LPAREN DROP NUMBER sequential_colls','function_drop',4,'p_function_drop','sintactico_clojure.py',98),
  ('general_expression -> math_operation','general_expression',1,'p_general_expression','sintactico_clojure.py',106),
  ('general_expression -> bool_operation','general_expression',1,'p_general_expression','sintactico_clojure.py',107),
  ('general_expression -> compare_operation','general_expression',1,'p_general_expression','sintactico_clojure.py',108),
  ('general_expression -> variable_expression','general_expression',1,'p_general_expression','sintactico_clojure.py',109),
  ('num_expression -> LPAREN math_operation RPAREN','num_expression',3,'p_num_expression','sintactico_clojure.py',113),
  ('math_operation -> PLUS num_expression NUMBER','math_operation',3,'p_operation_plus','sintactico_clojure.py',117),
  ('math_operation -> MINUS num_expression NUMBER','math_operation',3,'p_operation_minus','sintactico_clojure.py',121),
  ('math_operation -> DIVIDE num_expression NUMBER','math_operation',3,'p_operation_divide','sintactico_clojure.py',125),
  ('math_operation -> TIMES num_expression NUMBER','math_operation',3,'p_operation_times','sintactico_clojure.py',129),
  ('num_expression -> NUMBER','num_expression',1,'p_number','sintactico_clojure.py',133),
  ('bool_expression -> LPAREN bool_operation RPAREN','bool_expression',3,'p_boolean_expression','sintactico_clojure.py',138),
  ('bool_operation -> AND bool_expression bool_expression','bool_operation',3,'p_bool_operation_and','sintactico_clojure.py',142),
  ('bool_operation -> OR bool_expression bool_expression','bool_operation',3,'p_bool_operation_or','sintactico_clojure.py',146),
  ('bool_operation -> NOT bool_expression','bool_operation',2,'p_bool_operation_not','sintactico_clojure.py',150),
  ('bool_expression -> BOOLEAN_TRUE','bool_expression',1,'p_bool_type','sintactico_clojure.py',154),
  ('bool_expression -> BOOLEAN_FALSE','bool_expression',1,'p_bool_type','sintactico_clojure.py',155),
  ('compare_operation -> GREATERTHAN num_expression num_expression','compare_operation',3,'p_compare_operation_greaterthan','sintactico_clojure.py',160),
  ('compare_operation -> LESSTHAN num_expression num_expression','compare_operation',3,'p_compare_operation_lessthan','sintactico_clojure.py',164),
  ('compare_operation -> GREATERTHANEQUALS num_expression num_expression','compare_operation',3,'p_compare_operation_greaterthan_equals','sintactico_clojure.py',168),
  ('compare_operation -> LESSTHANEQUALS num_expression num_expression','compare_operation',3,'p_compare_operation_lessthan_equals','sintactico_clojure.py',172),
  ('compare_operation -> EQUAL num_expression num_expression','compare_operation',3,'p_compare_operation_equal','sintactico_clojure.py',176),
  ('compare_operation -> NOTEQUAL num_expression num_expression','compare_operation',3,'p_compare_operation_notequal','sintactico_clojure.py',180),
  ('variable_expression -> DEF ID STRING','variable_expression',3,'p_variable_expression_string','sintactico_clojure.py',185),
  ('variable_expression -> DEF ID NUMBER','variable_expression',3,'p_variable_expression_number','sintactico_clojure.py',189),
  ('variable_expression -> FLOAT','variable_expression',1,'p_variable_expression_number','sintactico_clojure.py',190),
  ('variable_expression -> DEF ID BOOLEAN_TRUE','variable_expression',3,'p_variable_expression_boolean','sintactico_clojure.py',194),
  ('variable_expression -> BOOLEAN_FALSE','variable_expression',1,'p_variable_expression_boolean','sintactico_clojure.py',195),
]
